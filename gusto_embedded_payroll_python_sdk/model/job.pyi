# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class Job(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The representation of a job in Gusto.
    """


    class MetaOapg:
        
        class properties:
            
            
            class title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'title':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            version = schemas.StrSchema
            uuid = schemas.StrSchema
            employee_uuid = schemas.StrSchema
            hire_date = schemas.StrSchema
            primary = schemas.BoolSchema
            rate = schemas.StrSchema
            payment_unit = schemas.StrSchema
            current_compensation_uuid = schemas.StrSchema
            two_percent_shareholder = schemas.BoolSchema
            state_wc_covered = schemas.BoolSchema
            state_wc_class_code = schemas.StrSchema
            
            
            class compensations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Compensation']:
                        return Compensation
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Compensation'], typing.List['Compensation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'compensations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Compensation':
                    return super().__getitem__(i)
            __annotations__ = {
                "title": title,
                "version": version,
                "uuid": uuid,
                "employee_uuid": employee_uuid,
                "hire_date": hire_date,
                "primary": primary,
                "rate": rate,
                "payment_unit": payment_unit,
                "current_compensation_uuid": current_compensation_uuid,
                "two_percent_shareholder": two_percent_shareholder,
                "state_wc_covered": state_wc_covered,
                "state_wc_class_code": state_wc_class_code,
                "compensations": compensations,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_uuid"]) -> MetaOapg.properties.employee_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hire_date"]) -> MetaOapg.properties.hire_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary"]) -> MetaOapg.properties.primary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_unit"]) -> MetaOapg.properties.payment_unit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_compensation_uuid"]) -> MetaOapg.properties.current_compensation_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["two_percent_shareholder"]) -> MetaOapg.properties.two_percent_shareholder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_wc_covered"]) -> MetaOapg.properties.state_wc_covered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_wc_class_code"]) -> MetaOapg.properties.state_wc_class_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compensations"]) -> MetaOapg.properties.compensations: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "version", "uuid", "employee_uuid", "hire_date", "primary", "rate", "payment_unit", "current_compensation_uuid", "two_percent_shareholder", "state_wc_covered", "state_wc_class_code", "compensations", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_uuid"]) -> typing.Union[MetaOapg.properties.employee_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hire_date"]) -> typing.Union[MetaOapg.properties.hire_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary"]) -> typing.Union[MetaOapg.properties.primary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_unit"]) -> typing.Union[MetaOapg.properties.payment_unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_compensation_uuid"]) -> typing.Union[MetaOapg.properties.current_compensation_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["two_percent_shareholder"]) -> typing.Union[MetaOapg.properties.two_percent_shareholder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_wc_covered"]) -> typing.Union[MetaOapg.properties.state_wc_covered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_wc_class_code"]) -> typing.Union[MetaOapg.properties.state_wc_class_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compensations"]) -> typing.Union[MetaOapg.properties.compensations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "version", "uuid", "employee_uuid", "hire_date", "primary", "rate", "payment_unit", "current_compensation_uuid", "two_percent_shareholder", "state_wc_covered", "state_wc_class_code", "compensations", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, None, str, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        employee_uuid: typing.Union[MetaOapg.properties.employee_uuid, str, schemas.Unset] = schemas.unset,
        hire_date: typing.Union[MetaOapg.properties.hire_date, str, schemas.Unset] = schemas.unset,
        primary: typing.Union[MetaOapg.properties.primary, bool, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, str, schemas.Unset] = schemas.unset,
        payment_unit: typing.Union[MetaOapg.properties.payment_unit, str, schemas.Unset] = schemas.unset,
        current_compensation_uuid: typing.Union[MetaOapg.properties.current_compensation_uuid, str, schemas.Unset] = schemas.unset,
        two_percent_shareholder: typing.Union[MetaOapg.properties.two_percent_shareholder, bool, schemas.Unset] = schemas.unset,
        state_wc_covered: typing.Union[MetaOapg.properties.state_wc_covered, bool, schemas.Unset] = schemas.unset,
        state_wc_class_code: typing.Union[MetaOapg.properties.state_wc_class_code, str, schemas.Unset] = schemas.unset,
        compensations: typing.Union[MetaOapg.properties.compensations, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Job':
        return super().__new__(
            cls,
            *args,
            title=title,
            version=version,
            uuid=uuid,
            employee_uuid=employee_uuid,
            hire_date=hire_date,
            primary=primary,
            rate=rate,
            payment_unit=payment_unit,
            current_compensation_uuid=current_compensation_uuid,
            two_percent_shareholder=two_percent_shareholder,
            state_wc_covered=state_wc_covered,
            state_wc_class_code=state_wc_class_code,
            compensations=compensations,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.compensation import Compensation
