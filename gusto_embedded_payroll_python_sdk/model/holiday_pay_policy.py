# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class HolidayPayPolicy(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Representation of a Holiday Pay Policy
    """


    class MetaOapg:
        required = {
            "company_uuid",
            "federal_holidays",
            "employees",
            "version",
        }
        
        class properties:
            version = schemas.StrSchema
            company_uuid = schemas.StrSchema
        
            @staticmethod
            def federal_holidays() -> typing.Type['HolidayPayPolicyFederalHolidays']:
                return HolidayPayPolicyFederalHolidays
        
            @staticmethod
            def employees() -> typing.Type['HolidayPayPolicyEmployees']:
                return HolidayPayPolicyEmployees
            __annotations__ = {
                "version": version,
                "company_uuid": company_uuid,
                "federal_holidays": federal_holidays,
                "employees": employees,
            }
    
    company_uuid: MetaOapg.properties.company_uuid
    federal_holidays: 'HolidayPayPolicyFederalHolidays'
    employees: 'HolidayPayPolicyEmployees'
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_uuid"]) -> MetaOapg.properties.company_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federal_holidays"]) -> 'HolidayPayPolicyFederalHolidays': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employees"]) -> 'HolidayPayPolicyEmployees': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "company_uuid", "federal_holidays", "employees", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_uuid"]) -> MetaOapg.properties.company_uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federal_holidays"]) -> 'HolidayPayPolicyFederalHolidays': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employees"]) -> 'HolidayPayPolicyEmployees': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "company_uuid", "federal_holidays", "employees", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        company_uuid: typing.Union[MetaOapg.properties.company_uuid, str, ],
        federal_holidays: 'HolidayPayPolicyFederalHolidays',
        employees: 'HolidayPayPolicyEmployees',
        version: typing.Union[MetaOapg.properties.version, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HolidayPayPolicy':
        return super().__new__(
            cls,
            *args,
            company_uuid=company_uuid,
            federal_holidays=federal_holidays,
            employees=employees,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.holiday_pay_policy_employees import HolidayPayPolicyEmployees
from gusto_embedded_payroll_python_sdk.model.holiday_pay_policy_federal_holidays import HolidayPayPolicyFederalHolidays
