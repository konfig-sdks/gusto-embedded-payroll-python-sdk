# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class PayrollReceiptTotals(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The subtotals for the payroll.
    """


    class MetaOapg:
        
        class properties:
            company_debit = schemas.StrSchema
            net_pay_debit = schemas.StrSchema
            child_support_debit = schemas.StrSchema
            reimbursement_debit = schemas.StrSchema
            tax_debit = schemas.StrSchema
            __annotations__ = {
                "company_debit": company_debit,
                "net_pay_debit": net_pay_debit,
                "child_support_debit": child_support_debit,
                "reimbursement_debit": reimbursement_debit,
                "tax_debit": tax_debit,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_debit"]) -> MetaOapg.properties.company_debit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["net_pay_debit"]) -> MetaOapg.properties.net_pay_debit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["child_support_debit"]) -> MetaOapg.properties.child_support_debit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reimbursement_debit"]) -> MetaOapg.properties.reimbursement_debit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_debit"]) -> MetaOapg.properties.tax_debit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["company_debit", "net_pay_debit", "child_support_debit", "reimbursement_debit", "tax_debit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_debit"]) -> typing.Union[MetaOapg.properties.company_debit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["net_pay_debit"]) -> typing.Union[MetaOapg.properties.net_pay_debit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["child_support_debit"]) -> typing.Union[MetaOapg.properties.child_support_debit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reimbursement_debit"]) -> typing.Union[MetaOapg.properties.reimbursement_debit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_debit"]) -> typing.Union[MetaOapg.properties.tax_debit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["company_debit", "net_pay_debit", "child_support_debit", "reimbursement_debit", "tax_debit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        company_debit: typing.Union[MetaOapg.properties.company_debit, str, schemas.Unset] = schemas.unset,
        net_pay_debit: typing.Union[MetaOapg.properties.net_pay_debit, str, schemas.Unset] = schemas.unset,
        child_support_debit: typing.Union[MetaOapg.properties.child_support_debit, str, schemas.Unset] = schemas.unset,
        reimbursement_debit: typing.Union[MetaOapg.properties.reimbursement_debit, str, schemas.Unset] = schemas.unset,
        tax_debit: typing.Union[MetaOapg.properties.tax_debit, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayrollReceiptTotals':
        return super().__new__(
            cls,
            *args,
            company_debit=company_debit,
            net_pay_debit=net_pay_debit,
            child_support_debit=child_support_debit,
            reimbursement_debit=reimbursement_debit,
            tax_debit=tax_debit,
            _configuration=_configuration,
            **kwargs,
        )
