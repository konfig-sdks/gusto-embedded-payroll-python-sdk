# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class ExternalPayroll(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The representation of an external payroll.
    """


    class MetaOapg:
        
        class properties:
            uuid = schemas.StrSchema
            company_uuid = schemas.StrSchema
            check_date = schemas.StrSchema
            payment_period_start_date = schemas.StrSchema
            payment_period_end_date = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "unprocessed": "UNPROCESSED",
                        "processed": "PROCESSED",
                    }
                
                @schemas.classproperty
                def UNPROCESSED(cls):
                    return cls("unprocessed")
                
                @schemas.classproperty
                def PROCESSED(cls):
                    return cls("processed")
        
            @staticmethod
            def external_payroll_items() -> typing.Type['ExternalPayrollExternalPayrollItems']:
                return ExternalPayrollExternalPayrollItems
        
            @staticmethod
            def applicable_earnings() -> typing.Type['ExternalPayrollApplicableEarnings']:
                return ExternalPayrollApplicableEarnings
        
            @staticmethod
            def applicable_benefits() -> typing.Type['ExternalPayrollApplicableBenefits']:
                return ExternalPayrollApplicableBenefits
        
            @staticmethod
            def applicable_taxes() -> typing.Type['ExternalPayrollApplicableTaxes']:
                return ExternalPayrollApplicableTaxes
        
            @staticmethod
            def metadata() -> typing.Type['ExternalPayrollMetadata']:
                return ExternalPayrollMetadata
            __annotations__ = {
                "uuid": uuid,
                "company_uuid": company_uuid,
                "check_date": check_date,
                "payment_period_start_date": payment_period_start_date,
                "payment_period_end_date": payment_period_end_date,
                "status": status,
                "external_payroll_items": external_payroll_items,
                "applicable_earnings": applicable_earnings,
                "applicable_benefits": applicable_benefits,
                "applicable_taxes": applicable_taxes,
                "metadata": metadata,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_uuid"]) -> MetaOapg.properties.company_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check_date"]) -> MetaOapg.properties.check_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_period_start_date"]) -> MetaOapg.properties.payment_period_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_period_end_date"]) -> MetaOapg.properties.payment_period_end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_payroll_items"]) -> 'ExternalPayrollExternalPayrollItems': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicable_earnings"]) -> 'ExternalPayrollApplicableEarnings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicable_benefits"]) -> 'ExternalPayrollApplicableBenefits': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicable_taxes"]) -> 'ExternalPayrollApplicableTaxes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'ExternalPayrollMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uuid", "company_uuid", "check_date", "payment_period_start_date", "payment_period_end_date", "status", "external_payroll_items", "applicable_earnings", "applicable_benefits", "applicable_taxes", "metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_uuid"]) -> typing.Union[MetaOapg.properties.company_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check_date"]) -> typing.Union[MetaOapg.properties.check_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_period_start_date"]) -> typing.Union[MetaOapg.properties.payment_period_start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_period_end_date"]) -> typing.Union[MetaOapg.properties.payment_period_end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_payroll_items"]) -> typing.Union['ExternalPayrollExternalPayrollItems', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicable_earnings"]) -> typing.Union['ExternalPayrollApplicableEarnings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicable_benefits"]) -> typing.Union['ExternalPayrollApplicableBenefits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicable_taxes"]) -> typing.Union['ExternalPayrollApplicableTaxes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union['ExternalPayrollMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uuid", "company_uuid", "check_date", "payment_period_start_date", "payment_period_end_date", "status", "external_payroll_items", "applicable_earnings", "applicable_benefits", "applicable_taxes", "metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        company_uuid: typing.Union[MetaOapg.properties.company_uuid, str, schemas.Unset] = schemas.unset,
        check_date: typing.Union[MetaOapg.properties.check_date, str, schemas.Unset] = schemas.unset,
        payment_period_start_date: typing.Union[MetaOapg.properties.payment_period_start_date, str, schemas.Unset] = schemas.unset,
        payment_period_end_date: typing.Union[MetaOapg.properties.payment_period_end_date, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        external_payroll_items: typing.Union['ExternalPayrollExternalPayrollItems', schemas.Unset] = schemas.unset,
        applicable_earnings: typing.Union['ExternalPayrollApplicableEarnings', schemas.Unset] = schemas.unset,
        applicable_benefits: typing.Union['ExternalPayrollApplicableBenefits', schemas.Unset] = schemas.unset,
        applicable_taxes: typing.Union['ExternalPayrollApplicableTaxes', schemas.Unset] = schemas.unset,
        metadata: typing.Union['ExternalPayrollMetadata', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExternalPayroll':
        return super().__new__(
            cls,
            *args,
            uuid=uuid,
            company_uuid=company_uuid,
            check_date=check_date,
            payment_period_start_date=payment_period_start_date,
            payment_period_end_date=payment_period_end_date,
            status=status,
            external_payroll_items=external_payroll_items,
            applicable_earnings=applicable_earnings,
            applicable_benefits=applicable_benefits,
            applicable_taxes=applicable_taxes,
            metadata=metadata,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.external_payroll_applicable_benefits import ExternalPayrollApplicableBenefits
from gusto_embedded_payroll_python_sdk.model.external_payroll_applicable_earnings import ExternalPayrollApplicableEarnings
from gusto_embedded_payroll_python_sdk.model.external_payroll_applicable_taxes import ExternalPayrollApplicableTaxes
from gusto_embedded_payroll_python_sdk.model.external_payroll_external_payroll_items import ExternalPayrollExternalPayrollItems
from gusto_embedded_payroll_python_sdk.model.external_payroll_metadata import ExternalPayrollMetadata
