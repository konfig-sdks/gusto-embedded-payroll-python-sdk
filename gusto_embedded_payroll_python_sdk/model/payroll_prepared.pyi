# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class PayrollPrepared(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            payroll_deadline = schemas.DateTimeSchema
            check_date = schemas.StrSchema
            processed = schemas.BoolSchema
            processed_date = schemas.StrSchema
            calculated_at = schemas.StrSchema
            payroll_uuid = schemas.StrSchema
            company_uuid = schemas.StrSchema
            off_cycle = schemas.BoolSchema
        
            @staticmethod
            def off_cycle_reason() -> typing.Type['OffCycleReasonType']:
                return OffCycleReasonType
            external = schemas.BoolSchema
            final_termination_payroll = schemas.BoolSchema
        
            @staticmethod
            def withholding_pay_period() -> typing.Type['PayrollWithholdingPayPeriodType']:
                return PayrollWithholdingPayPeriodType
            skip_regular_deductions = schemas.BoolSchema
            fixed_withholding_rate = schemas.BoolSchema
        
            @staticmethod
            def pay_period() -> typing.Type['PayrollPayPeriodType']:
                return PayrollPayPeriodType
        
            @staticmethod
            def payroll_status_meta() -> typing.Type['PayrollPayrollStatusMetaType']:
                return PayrollPayrollStatusMetaType
        
            @staticmethod
            def employee_compensations() -> typing.Type['PayrollEmployeeCompensationsType']:
                return PayrollEmployeeCompensationsType
        
            @staticmethod
            def payment_speed_changed() -> typing.Type['PayrollPaymentSpeedChangedType']:
                return PayrollPaymentSpeedChangedType
            created_at = schemas.DateTimeSchema
        
            @staticmethod
            def fixed_compensation_types() -> typing.Type['PayrollFixedCompensationTypesType']:
                return PayrollFixedCompensationTypesType
            __annotations__ = {
                "payroll_deadline": payroll_deadline,
                "check_date": check_date,
                "processed": processed,
                "processed_date": processed_date,
                "calculated_at": calculated_at,
                "payroll_uuid": payroll_uuid,
                "company_uuid": company_uuid,
                "off_cycle": off_cycle,
                "off_cycle_reason": off_cycle_reason,
                "external": external,
                "final_termination_payroll": final_termination_payroll,
                "withholding_pay_period": withholding_pay_period,
                "skip_regular_deductions": skip_regular_deductions,
                "fixed_withholding_rate": fixed_withholding_rate,
                "pay_period": pay_period,
                "payroll_status_meta": payroll_status_meta,
                "employee_compensations": employee_compensations,
                "payment_speed_changed": payment_speed_changed,
                "created_at": created_at,
                "fixed_compensation_types": fixed_compensation_types,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_deadline"]) -> MetaOapg.properties.payroll_deadline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check_date"]) -> MetaOapg.properties.check_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processed"]) -> MetaOapg.properties.processed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processed_date"]) -> MetaOapg.properties.processed_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculated_at"]) -> MetaOapg.properties.calculated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_uuid"]) -> MetaOapg.properties.payroll_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_uuid"]) -> MetaOapg.properties.company_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["off_cycle"]) -> MetaOapg.properties.off_cycle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["off_cycle_reason"]) -> 'OffCycleReasonType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external"]) -> MetaOapg.properties.external: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["final_termination_payroll"]) -> MetaOapg.properties.final_termination_payroll: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["withholding_pay_period"]) -> 'PayrollWithholdingPayPeriodType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skip_regular_deductions"]) -> MetaOapg.properties.skip_regular_deductions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fixed_withholding_rate"]) -> MetaOapg.properties.fixed_withholding_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_period"]) -> 'PayrollPayPeriodType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_status_meta"]) -> 'PayrollPayrollStatusMetaType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_compensations"]) -> 'PayrollEmployeeCompensationsType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_speed_changed"]) -> 'PayrollPaymentSpeedChangedType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fixed_compensation_types"]) -> 'PayrollFixedCompensationTypesType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payroll_deadline", "check_date", "processed", "processed_date", "calculated_at", "payroll_uuid", "company_uuid", "off_cycle", "off_cycle_reason", "external", "final_termination_payroll", "withholding_pay_period", "skip_regular_deductions", "fixed_withholding_rate", "pay_period", "payroll_status_meta", "employee_compensations", "payment_speed_changed", "created_at", "fixed_compensation_types", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_deadline"]) -> typing.Union[MetaOapg.properties.payroll_deadline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check_date"]) -> typing.Union[MetaOapg.properties.check_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processed"]) -> typing.Union[MetaOapg.properties.processed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processed_date"]) -> typing.Union[MetaOapg.properties.processed_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculated_at"]) -> typing.Union[MetaOapg.properties.calculated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_uuid"]) -> typing.Union[MetaOapg.properties.payroll_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_uuid"]) -> typing.Union[MetaOapg.properties.company_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["off_cycle"]) -> typing.Union[MetaOapg.properties.off_cycle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["off_cycle_reason"]) -> typing.Union['OffCycleReasonType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external"]) -> typing.Union[MetaOapg.properties.external, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["final_termination_payroll"]) -> typing.Union[MetaOapg.properties.final_termination_payroll, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["withholding_pay_period"]) -> typing.Union['PayrollWithholdingPayPeriodType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skip_regular_deductions"]) -> typing.Union[MetaOapg.properties.skip_regular_deductions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fixed_withholding_rate"]) -> typing.Union[MetaOapg.properties.fixed_withholding_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_period"]) -> typing.Union['PayrollPayPeriodType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_status_meta"]) -> typing.Union['PayrollPayrollStatusMetaType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_compensations"]) -> typing.Union['PayrollEmployeeCompensationsType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_speed_changed"]) -> typing.Union['PayrollPaymentSpeedChangedType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fixed_compensation_types"]) -> typing.Union['PayrollFixedCompensationTypesType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payroll_deadline", "check_date", "processed", "processed_date", "calculated_at", "payroll_uuid", "company_uuid", "off_cycle", "off_cycle_reason", "external", "final_termination_payroll", "withholding_pay_period", "skip_regular_deductions", "fixed_withholding_rate", "pay_period", "payroll_status_meta", "employee_compensations", "payment_speed_changed", "created_at", "fixed_compensation_types", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payroll_deadline: typing.Union[MetaOapg.properties.payroll_deadline, str, datetime, schemas.Unset] = schemas.unset,
        check_date: typing.Union[MetaOapg.properties.check_date, str, schemas.Unset] = schemas.unset,
        processed: typing.Union[MetaOapg.properties.processed, bool, schemas.Unset] = schemas.unset,
        processed_date: typing.Union[MetaOapg.properties.processed_date, str, schemas.Unset] = schemas.unset,
        calculated_at: typing.Union[MetaOapg.properties.calculated_at, str, schemas.Unset] = schemas.unset,
        payroll_uuid: typing.Union[MetaOapg.properties.payroll_uuid, str, schemas.Unset] = schemas.unset,
        company_uuid: typing.Union[MetaOapg.properties.company_uuid, str, schemas.Unset] = schemas.unset,
        off_cycle: typing.Union[MetaOapg.properties.off_cycle, bool, schemas.Unset] = schemas.unset,
        off_cycle_reason: typing.Union['OffCycleReasonType', schemas.Unset] = schemas.unset,
        external: typing.Union[MetaOapg.properties.external, bool, schemas.Unset] = schemas.unset,
        final_termination_payroll: typing.Union[MetaOapg.properties.final_termination_payroll, bool, schemas.Unset] = schemas.unset,
        withholding_pay_period: typing.Union['PayrollWithholdingPayPeriodType', schemas.Unset] = schemas.unset,
        skip_regular_deductions: typing.Union[MetaOapg.properties.skip_regular_deductions, bool, schemas.Unset] = schemas.unset,
        fixed_withholding_rate: typing.Union[MetaOapg.properties.fixed_withholding_rate, bool, schemas.Unset] = schemas.unset,
        pay_period: typing.Union['PayrollPayPeriodType', schemas.Unset] = schemas.unset,
        payroll_status_meta: typing.Union['PayrollPayrollStatusMetaType', schemas.Unset] = schemas.unset,
        employee_compensations: typing.Union['PayrollEmployeeCompensationsType', schemas.Unset] = schemas.unset,
        payment_speed_changed: typing.Union['PayrollPaymentSpeedChangedType', schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        fixed_compensation_types: typing.Union['PayrollFixedCompensationTypesType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayrollPrepared':
        return super().__new__(
            cls,
            *args,
            payroll_deadline=payroll_deadline,
            check_date=check_date,
            processed=processed,
            processed_date=processed_date,
            calculated_at=calculated_at,
            payroll_uuid=payroll_uuid,
            company_uuid=company_uuid,
            off_cycle=off_cycle,
            off_cycle_reason=off_cycle_reason,
            external=external,
            final_termination_payroll=final_termination_payroll,
            withholding_pay_period=withholding_pay_period,
            skip_regular_deductions=skip_regular_deductions,
            fixed_withholding_rate=fixed_withholding_rate,
            pay_period=pay_period,
            payroll_status_meta=payroll_status_meta,
            employee_compensations=employee_compensations,
            payment_speed_changed=payment_speed_changed,
            created_at=created_at,
            fixed_compensation_types=fixed_compensation_types,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.off_cycle_reason_type import OffCycleReasonType
from gusto_embedded_payroll_python_sdk.model.payroll_employee_compensations_type import PayrollEmployeeCompensationsType
from gusto_embedded_payroll_python_sdk.model.payroll_fixed_compensation_types_type import PayrollFixedCompensationTypesType
from gusto_embedded_payroll_python_sdk.model.payroll_pay_period_type import PayrollPayPeriodType
from gusto_embedded_payroll_python_sdk.model.payroll_payment_speed_changed_type import PayrollPaymentSpeedChangedType
from gusto_embedded_payroll_python_sdk.model.payroll_payroll_status_meta_type import PayrollPayrollStatusMetaType
from gusto_embedded_payroll_python_sdk.model.payroll_withholding_pay_period_type import PayrollWithholdingPayPeriodType
