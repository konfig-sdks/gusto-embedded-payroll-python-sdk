# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class TimeOffPoliciesUpdatePolicyRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            
            
            class accrual_method(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def UNLIMITED(cls):
                    return cls("unlimited")
                
                @schemas.classproperty
                def PER_PAY_PERIOD(cls):
                    return cls("per_pay_period")
                
                @schemas.classproperty
                def PER_CALENDAR_YEAR(cls):
                    return cls("per_calendar_year")
                
                @schemas.classproperty
                def PER_ANNIVERSARY_YEAR(cls):
                    return cls("per_anniversary_year")
                
                @schemas.classproperty
                def PER_HOUR_WORKED(cls):
                    return cls("per_hour_worked")
                
                @schemas.classproperty
                def PER_HOUR_WORKED_NO_OVERTIME(cls):
                    return cls("per_hour_worked_no_overtime")
                
                @schemas.classproperty
                def PER_HOUR_PAID(cls):
                    return cls("per_hour_paid")
                
                @schemas.classproperty
                def PER_HOUR_PAID_NO_OVERTIME(cls):
                    return cls("per_hour_paid_no_overtime")
            accrual_rate = schemas.StrSchema
            accrual_rate_unit = schemas.StrSchema
            paid_out_on_termination = schemas.BoolSchema
            accrual_waiting_period_days = schemas.IntSchema
            carryover_limit_hours = schemas.StrSchema
            max_accrual_hours_per_year = schemas.StrSchema
            max_hours = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "accrual_method": accrual_method,
                "accrual_rate": accrual_rate,
                "accrual_rate_unit": accrual_rate_unit,
                "paid_out_on_termination": paid_out_on_termination,
                "accrual_waiting_period_days": accrual_waiting_period_days,
                "carryover_limit_hours": carryover_limit_hours,
                "max_accrual_hours_per_year": max_accrual_hours_per_year,
                "max_hours": max_hours,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_method"]) -> MetaOapg.properties.accrual_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_rate"]) -> MetaOapg.properties.accrual_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_rate_unit"]) -> MetaOapg.properties.accrual_rate_unit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paid_out_on_termination"]) -> MetaOapg.properties.paid_out_on_termination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_waiting_period_days"]) -> MetaOapg.properties.accrual_waiting_period_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carryover_limit_hours"]) -> MetaOapg.properties.carryover_limit_hours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_accrual_hours_per_year"]) -> MetaOapg.properties.max_accrual_hours_per_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_hours"]) -> MetaOapg.properties.max_hours: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "accrual_method", "accrual_rate", "accrual_rate_unit", "paid_out_on_termination", "accrual_waiting_period_days", "carryover_limit_hours", "max_accrual_hours_per_year", "max_hours", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_method"]) -> typing.Union[MetaOapg.properties.accrual_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_rate"]) -> typing.Union[MetaOapg.properties.accrual_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_rate_unit"]) -> typing.Union[MetaOapg.properties.accrual_rate_unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paid_out_on_termination"]) -> typing.Union[MetaOapg.properties.paid_out_on_termination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_waiting_period_days"]) -> typing.Union[MetaOapg.properties.accrual_waiting_period_days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carryover_limit_hours"]) -> typing.Union[MetaOapg.properties.carryover_limit_hours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_accrual_hours_per_year"]) -> typing.Union[MetaOapg.properties.max_accrual_hours_per_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_hours"]) -> typing.Union[MetaOapg.properties.max_hours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "accrual_method", "accrual_rate", "accrual_rate_unit", "paid_out_on_termination", "accrual_waiting_period_days", "carryover_limit_hours", "max_accrual_hours_per_year", "max_hours", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        accrual_method: typing.Union[MetaOapg.properties.accrual_method, str, schemas.Unset] = schemas.unset,
        accrual_rate: typing.Union[MetaOapg.properties.accrual_rate, str, schemas.Unset] = schemas.unset,
        accrual_rate_unit: typing.Union[MetaOapg.properties.accrual_rate_unit, str, schemas.Unset] = schemas.unset,
        paid_out_on_termination: typing.Union[MetaOapg.properties.paid_out_on_termination, bool, schemas.Unset] = schemas.unset,
        accrual_waiting_period_days: typing.Union[MetaOapg.properties.accrual_waiting_period_days, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        carryover_limit_hours: typing.Union[MetaOapg.properties.carryover_limit_hours, str, schemas.Unset] = schemas.unset,
        max_accrual_hours_per_year: typing.Union[MetaOapg.properties.max_accrual_hours_per_year, str, schemas.Unset] = schemas.unset,
        max_hours: typing.Union[MetaOapg.properties.max_hours, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeOffPoliciesUpdatePolicyRequest':
        return super().__new__(
            cls,
            *args,
            name=name,
            accrual_method=accrual_method,
            accrual_rate=accrual_rate,
            accrual_rate_unit=accrual_rate_unit,
            paid_out_on_termination=paid_out_on_termination,
            accrual_waiting_period_days=accrual_waiting_period_days,
            carryover_limit_hours=carryover_limit_hours,
            max_accrual_hours_per_year=max_accrual_hours_per_year,
            max_hours=max_hours,
            _configuration=_configuration,
            **kwargs,
        )
