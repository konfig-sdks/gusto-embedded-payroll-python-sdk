# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class TimeOffPolicy(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Representation of a Time Off Policy
    """


    class MetaOapg:
        required = {
            "company_uuid",
            "policy_type",
            "accrual_method",
            "is_active",
            "name",
            "employees",
            "uuid",
        }
        
        class properties:
            uuid = schemas.StrSchema
            company_uuid = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class policy_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "vacation": "VACATION",
                        "sick": "SICK",
                    }
                
                @schemas.classproperty
                def VACATION(cls):
                    return cls("vacation")
                
                @schemas.classproperty
                def SICK(cls):
                    return cls("sick")
            accrual_method = schemas.StrSchema
            is_active = schemas.BoolSchema
        
            @staticmethod
            def employees() -> typing.Type['TimeOffPolicyEmployees']:
                return TimeOffPolicyEmployees
            version = schemas.StrSchema
            accrual_rate = schemas.StrSchema
            accrual_rate_unit = schemas.StrSchema
            paid_out_on_termination = schemas.BoolSchema
            accrual_waiting_period_days = schemas.IntSchema
            carryover_limit_hours = schemas.StrSchema
            max_accrual_hours_per_year = schemas.StrSchema
            max_hours = schemas.StrSchema
            complete = schemas.BoolSchema
            __annotations__ = {
                "uuid": uuid,
                "company_uuid": company_uuid,
                "name": name,
                "policy_type": policy_type,
                "accrual_method": accrual_method,
                "is_active": is_active,
                "employees": employees,
                "version": version,
                "accrual_rate": accrual_rate,
                "accrual_rate_unit": accrual_rate_unit,
                "paid_out_on_termination": paid_out_on_termination,
                "accrual_waiting_period_days": accrual_waiting_period_days,
                "carryover_limit_hours": carryover_limit_hours,
                "max_accrual_hours_per_year": max_accrual_hours_per_year,
                "max_hours": max_hours,
                "complete": complete,
            }
    
    company_uuid: MetaOapg.properties.company_uuid
    policy_type: MetaOapg.properties.policy_type
    accrual_method: MetaOapg.properties.accrual_method
    is_active: MetaOapg.properties.is_active
    name: MetaOapg.properties.name
    employees: 'TimeOffPolicyEmployees'
    uuid: MetaOapg.properties.uuid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_uuid"]) -> MetaOapg.properties.company_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy_type"]) -> MetaOapg.properties.policy_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_method"]) -> MetaOapg.properties.accrual_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employees"]) -> 'TimeOffPolicyEmployees': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_rate"]) -> MetaOapg.properties.accrual_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_rate_unit"]) -> MetaOapg.properties.accrual_rate_unit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paid_out_on_termination"]) -> MetaOapg.properties.paid_out_on_termination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_waiting_period_days"]) -> MetaOapg.properties.accrual_waiting_period_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carryover_limit_hours"]) -> MetaOapg.properties.carryover_limit_hours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_accrual_hours_per_year"]) -> MetaOapg.properties.max_accrual_hours_per_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_hours"]) -> MetaOapg.properties.max_hours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complete"]) -> MetaOapg.properties.complete: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uuid", "company_uuid", "name", "policy_type", "accrual_method", "is_active", "employees", "version", "accrual_rate", "accrual_rate_unit", "paid_out_on_termination", "accrual_waiting_period_days", "carryover_limit_hours", "max_accrual_hours_per_year", "max_hours", "complete", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_uuid"]) -> MetaOapg.properties.company_uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy_type"]) -> MetaOapg.properties.policy_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_method"]) -> MetaOapg.properties.accrual_method: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employees"]) -> 'TimeOffPolicyEmployees': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_rate"]) -> typing.Union[MetaOapg.properties.accrual_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_rate_unit"]) -> typing.Union[MetaOapg.properties.accrual_rate_unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paid_out_on_termination"]) -> typing.Union[MetaOapg.properties.paid_out_on_termination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_waiting_period_days"]) -> typing.Union[MetaOapg.properties.accrual_waiting_period_days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carryover_limit_hours"]) -> typing.Union[MetaOapg.properties.carryover_limit_hours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_accrual_hours_per_year"]) -> typing.Union[MetaOapg.properties.max_accrual_hours_per_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_hours"]) -> typing.Union[MetaOapg.properties.max_hours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complete"]) -> typing.Union[MetaOapg.properties.complete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uuid", "company_uuid", "name", "policy_type", "accrual_method", "is_active", "employees", "version", "accrual_rate", "accrual_rate_unit", "paid_out_on_termination", "accrual_waiting_period_days", "carryover_limit_hours", "max_accrual_hours_per_year", "max_hours", "complete", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        company_uuid: typing.Union[MetaOapg.properties.company_uuid, str, ],
        policy_type: typing.Union[MetaOapg.properties.policy_type, str, ],
        accrual_method: typing.Union[MetaOapg.properties.accrual_method, str, ],
        is_active: typing.Union[MetaOapg.properties.is_active, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        employees: 'TimeOffPolicyEmployees',
        uuid: typing.Union[MetaOapg.properties.uuid, str, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        accrual_rate: typing.Union[MetaOapg.properties.accrual_rate, str, schemas.Unset] = schemas.unset,
        accrual_rate_unit: typing.Union[MetaOapg.properties.accrual_rate_unit, str, schemas.Unset] = schemas.unset,
        paid_out_on_termination: typing.Union[MetaOapg.properties.paid_out_on_termination, bool, schemas.Unset] = schemas.unset,
        accrual_waiting_period_days: typing.Union[MetaOapg.properties.accrual_waiting_period_days, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        carryover_limit_hours: typing.Union[MetaOapg.properties.carryover_limit_hours, str, schemas.Unset] = schemas.unset,
        max_accrual_hours_per_year: typing.Union[MetaOapg.properties.max_accrual_hours_per_year, str, schemas.Unset] = schemas.unset,
        max_hours: typing.Union[MetaOapg.properties.max_hours, str, schemas.Unset] = schemas.unset,
        complete: typing.Union[MetaOapg.properties.complete, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeOffPolicy':
        return super().__new__(
            cls,
            *args,
            company_uuid=company_uuid,
            policy_type=policy_type,
            accrual_method=accrual_method,
            is_active=is_active,
            name=name,
            employees=employees,
            uuid=uuid,
            version=version,
            accrual_rate=accrual_rate,
            accrual_rate_unit=accrual_rate_unit,
            paid_out_on_termination=paid_out_on_termination,
            accrual_waiting_period_days=accrual_waiting_period_days,
            carryover_limit_hours=carryover_limit_hours,
            max_accrual_hours_per_year=max_accrual_hours_per_year,
            max_hours=max_hours,
            complete=complete,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.time_off_policy_employees import TimeOffPolicyEmployees
