# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class FederalTaxDetailsUpdateAttributesRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "version",
        }
        
        class properties:
            version = schemas.StrSchema
            legal_name = schemas.StrSchema
            ein = schemas.StrSchema
            
            
            class tax_payer_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CCORPORATION(cls):
                    return cls("C-Corporation")
                
                @schemas.classproperty
                def SCORPORATION(cls):
                    return cls("S-Corporation")
                
                @schemas.classproperty
                def SOLE_PROPRIETOR(cls):
                    return cls("Sole proprietor")
                
                @schemas.classproperty
                def LLC(cls):
                    return cls("LLC")
                
                @schemas.classproperty
                def LLP(cls):
                    return cls("LLP")
                
                @schemas.classproperty
                def LIMITED_PARTNERSHIP(cls):
                    return cls("Limited partnership")
                
                @schemas.classproperty
                def COOWNERSHIP(cls):
                    return cls("Co-ownership")
                
                @schemas.classproperty
                def ASSOCIATION(cls):
                    return cls("Association")
                
                @schemas.classproperty
                def TRUSTEESHIP(cls):
                    return cls("Trusteeship")
                
                @schemas.classproperty
                def GENERAL_PARTNERSHIP(cls):
                    return cls("General partnership")
                
                @schemas.classproperty
                def JOINT_VENTURE(cls):
                    return cls("Joint venture")
                
                @schemas.classproperty
                def NONPROFIT(cls):
                    return cls("Non-Profit")
            filing_form = schemas.StrSchema
            taxable_as_scorp = schemas.BoolSchema
            __annotations__ = {
                "version": version,
                "legal_name": legal_name,
                "ein": ein,
                "tax_payer_type": tax_payer_type,
                "filing_form": filing_form,
                "taxable_as_scorp": taxable_as_scorp,
            }
    
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legal_name"]) -> MetaOapg.properties.legal_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ein"]) -> MetaOapg.properties.ein: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_payer_type"]) -> MetaOapg.properties.tax_payer_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filing_form"]) -> MetaOapg.properties.filing_form: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxable_as_scorp"]) -> MetaOapg.properties.taxable_as_scorp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "legal_name", "ein", "tax_payer_type", "filing_form", "taxable_as_scorp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legal_name"]) -> typing.Union[MetaOapg.properties.legal_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ein"]) -> typing.Union[MetaOapg.properties.ein, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_payer_type"]) -> typing.Union[MetaOapg.properties.tax_payer_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filing_form"]) -> typing.Union[MetaOapg.properties.filing_form, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxable_as_scorp"]) -> typing.Union[MetaOapg.properties.taxable_as_scorp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "legal_name", "ein", "tax_payer_type", "filing_form", "taxable_as_scorp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        legal_name: typing.Union[MetaOapg.properties.legal_name, str, schemas.Unset] = schemas.unset,
        ein: typing.Union[MetaOapg.properties.ein, str, schemas.Unset] = schemas.unset,
        tax_payer_type: typing.Union[MetaOapg.properties.tax_payer_type, str, schemas.Unset] = schemas.unset,
        filing_form: typing.Union[MetaOapg.properties.filing_form, str, schemas.Unset] = schemas.unset,
        taxable_as_scorp: typing.Union[MetaOapg.properties.taxable_as_scorp, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FederalTaxDetailsUpdateAttributesRequest':
        return super().__new__(
            cls,
            *args,
            version=version,
            legal_name=legal_name,
            ein=ein,
            tax_payer_type=tax_payer_type,
            filing_form=filing_form,
            taxable_as_scorp=taxable_as_scorp,
            _configuration=_configuration,
            **kwargs,
        )
