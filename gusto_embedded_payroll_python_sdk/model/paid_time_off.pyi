# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class PaidTimeOff(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The representation of paid time off in Gusto.
    """


    class MetaOapg:
        
        class properties:
            
            
            class name(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def VACATION_HOURS(cls):
                    return cls("Vacation Hours")
                
                @schemas.classproperty
                def SICK_HOURS(cls):
                    return cls("Sick Hours")
                
                @schemas.classproperty
                def HOLIDAY_HOURS(cls):
                    return cls("Holiday Hours")
            policy_name = schemas.StrSchema
            policy_uuid = schemas.StrSchema
            accrual_unit = schemas.StrSchema
            accrual_rate = schemas.StrSchema
            accrual_method = schemas.StrSchema
            accrual_period = schemas.StrSchema
            accrual_balance = schemas.StrSchema
            
            
            class maximum_accrual_balance(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'maximum_accrual_balance':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            paid_at_termination = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "policy_name": policy_name,
                "policy_uuid": policy_uuid,
                "accrual_unit": accrual_unit,
                "accrual_rate": accrual_rate,
                "accrual_method": accrual_method,
                "accrual_period": accrual_period,
                "accrual_balance": accrual_balance,
                "maximum_accrual_balance": maximum_accrual_balance,
                "paid_at_termination": paid_at_termination,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy_name"]) -> MetaOapg.properties.policy_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy_uuid"]) -> MetaOapg.properties.policy_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_unit"]) -> MetaOapg.properties.accrual_unit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_rate"]) -> MetaOapg.properties.accrual_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_method"]) -> MetaOapg.properties.accrual_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_period"]) -> MetaOapg.properties.accrual_period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrual_balance"]) -> MetaOapg.properties.accrual_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum_accrual_balance"]) -> MetaOapg.properties.maximum_accrual_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paid_at_termination"]) -> MetaOapg.properties.paid_at_termination: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "policy_name", "policy_uuid", "accrual_unit", "accrual_rate", "accrual_method", "accrual_period", "accrual_balance", "maximum_accrual_balance", "paid_at_termination", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy_name"]) -> typing.Union[MetaOapg.properties.policy_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy_uuid"]) -> typing.Union[MetaOapg.properties.policy_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_unit"]) -> typing.Union[MetaOapg.properties.accrual_unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_rate"]) -> typing.Union[MetaOapg.properties.accrual_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_method"]) -> typing.Union[MetaOapg.properties.accrual_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_period"]) -> typing.Union[MetaOapg.properties.accrual_period, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrual_balance"]) -> typing.Union[MetaOapg.properties.accrual_balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum_accrual_balance"]) -> typing.Union[MetaOapg.properties.maximum_accrual_balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paid_at_termination"]) -> typing.Union[MetaOapg.properties.paid_at_termination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "policy_name", "policy_uuid", "accrual_unit", "accrual_rate", "accrual_method", "accrual_period", "accrual_balance", "maximum_accrual_balance", "paid_at_termination", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        policy_name: typing.Union[MetaOapg.properties.policy_name, str, schemas.Unset] = schemas.unset,
        policy_uuid: typing.Union[MetaOapg.properties.policy_uuid, str, schemas.Unset] = schemas.unset,
        accrual_unit: typing.Union[MetaOapg.properties.accrual_unit, str, schemas.Unset] = schemas.unset,
        accrual_rate: typing.Union[MetaOapg.properties.accrual_rate, str, schemas.Unset] = schemas.unset,
        accrual_method: typing.Union[MetaOapg.properties.accrual_method, str, schemas.Unset] = schemas.unset,
        accrual_period: typing.Union[MetaOapg.properties.accrual_period, str, schemas.Unset] = schemas.unset,
        accrual_balance: typing.Union[MetaOapg.properties.accrual_balance, str, schemas.Unset] = schemas.unset,
        maximum_accrual_balance: typing.Union[MetaOapg.properties.maximum_accrual_balance, None, str, schemas.Unset] = schemas.unset,
        paid_at_termination: typing.Union[MetaOapg.properties.paid_at_termination, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaidTimeOff':
        return super().__new__(
            cls,
            *args,
            name=name,
            policy_name=policy_name,
            policy_uuid=policy_uuid,
            accrual_unit=accrual_unit,
            accrual_rate=accrual_rate,
            accrual_method=accrual_method,
            accrual_period=accrual_period,
            accrual_balance=accrual_balance,
            maximum_accrual_balance=maximum_accrual_balance,
            paid_at_termination=paid_at_termination,
            _configuration=_configuration,
            **kwargs,
        )
