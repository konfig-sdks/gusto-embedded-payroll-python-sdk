# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class GarnishmentsUpdateGarnishmentRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "version",
        }
        
        class properties:
            version = schemas.StrSchema
            description = schemas.StrSchema
            active = schemas.BoolSchema
            amount = schemas.StrSchema
            court_ordered = schemas.BoolSchema
            
            
            class times(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'times':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            recurring = schemas.BoolSchema
            
            
            class annual_maximum(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'float'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'annual_maximum':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class pay_period_maximum(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'float'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pay_period_maximum':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            deduct_as_percentage = schemas.BoolSchema
            __annotations__ = {
                "version": version,
                "description": description,
                "active": active,
                "amount": amount,
                "court_ordered": court_ordered,
                "times": times,
                "recurring": recurring,
                "annual_maximum": annual_maximum,
                "pay_period_maximum": pay_period_maximum,
                "deduct_as_percentage": deduct_as_percentage,
            }
    
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["court_ordered"]) -> MetaOapg.properties.court_ordered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["times"]) -> MetaOapg.properties.times: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurring"]) -> MetaOapg.properties.recurring: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annual_maximum"]) -> MetaOapg.properties.annual_maximum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_period_maximum"]) -> MetaOapg.properties.pay_period_maximum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deduct_as_percentage"]) -> MetaOapg.properties.deduct_as_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "description", "active", "amount", "court_ordered", "times", "recurring", "annual_maximum", "pay_period_maximum", "deduct_as_percentage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["court_ordered"]) -> typing.Union[MetaOapg.properties.court_ordered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["times"]) -> typing.Union[MetaOapg.properties.times, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurring"]) -> typing.Union[MetaOapg.properties.recurring, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annual_maximum"]) -> typing.Union[MetaOapg.properties.annual_maximum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_period_maximum"]) -> typing.Union[MetaOapg.properties.pay_period_maximum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deduct_as_percentage"]) -> typing.Union[MetaOapg.properties.deduct_as_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "description", "active", "amount", "court_ordered", "times", "recurring", "annual_maximum", "pay_period_maximum", "deduct_as_percentage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        court_ordered: typing.Union[MetaOapg.properties.court_ordered, bool, schemas.Unset] = schemas.unset,
        times: typing.Union[MetaOapg.properties.times, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        recurring: typing.Union[MetaOapg.properties.recurring, bool, schemas.Unset] = schemas.unset,
        annual_maximum: typing.Union[MetaOapg.properties.annual_maximum, None, str, schemas.Unset] = schemas.unset,
        pay_period_maximum: typing.Union[MetaOapg.properties.pay_period_maximum, None, str, schemas.Unset] = schemas.unset,
        deduct_as_percentage: typing.Union[MetaOapg.properties.deduct_as_percentage, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GarnishmentsUpdateGarnishmentRequest':
        return super().__new__(
            cls,
            *args,
            version=version,
            description=description,
            active=active,
            amount=amount,
            court_ordered=court_ordered,
            times=times,
            recurring=recurring,
            annual_maximum=annual_maximum,
            pay_period_maximum=pay_period_maximum,
            deduct_as_percentage=deduct_as_percentage,
            _configuration=_configuration,
            **kwargs,
        )
