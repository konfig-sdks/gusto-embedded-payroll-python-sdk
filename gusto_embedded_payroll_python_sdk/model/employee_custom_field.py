# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class EmployeeCustomField(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A custom field of an employee
    """


    class MetaOapg:
        required = {
            "company_custom_field_id",
            "name",
            "id",
            "type",
            "value",
        }
        
        class properties:
            id = schemas.StrSchema
            company_custom_field_id = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['CustomFieldType']:
                return CustomFieldType
            value = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def selection_options() -> typing.Type['EmployeeCustomFieldSelectionOptions']:
                return EmployeeCustomFieldSelectionOptions
            __annotations__ = {
                "id": id,
                "company_custom_field_id": company_custom_field_id,
                "name": name,
                "type": type,
                "value": value,
                "description": description,
                "selection_options": selection_options,
            }
    
    company_custom_field_id: MetaOapg.properties.company_custom_field_id
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    type: 'CustomFieldType'
    value: MetaOapg.properties.value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_custom_field_id"]) -> MetaOapg.properties.company_custom_field_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'CustomFieldType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selection_options"]) -> 'EmployeeCustomFieldSelectionOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "company_custom_field_id", "name", "type", "value", "description", "selection_options", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_custom_field_id"]) -> MetaOapg.properties.company_custom_field_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'CustomFieldType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selection_options"]) -> typing.Union['EmployeeCustomFieldSelectionOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "company_custom_field_id", "name", "type", "value", "description", "selection_options", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        company_custom_field_id: typing.Union[MetaOapg.properties.company_custom_field_id, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: 'CustomFieldType',
        value: typing.Union[MetaOapg.properties.value, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        selection_options: typing.Union['EmployeeCustomFieldSelectionOptions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeCustomField':
        return super().__new__(
            cls,
            *args,
            company_custom_field_id=company_custom_field_id,
            name=name,
            id=id,
            type=type,
            value=value,
            description=description,
            selection_options=selection_options,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.custom_field_type import CustomFieldType
from gusto_embedded_payroll_python_sdk.model.employee_custom_field_selection_options import EmployeeCustomFieldSelectionOptions
