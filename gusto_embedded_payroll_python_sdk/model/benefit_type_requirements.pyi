# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class BenefitTypeRequirements(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def employee_deduction() -> typing.Type['BenefitTypeRequirementsEmployeeDeduction']:
                return BenefitTypeRequirementsEmployeeDeduction
        
            @staticmethod
            def contribution() -> typing.Type['BenefitTypeRequirementsContribution']:
                return BenefitTypeRequirementsContribution
        
            @staticmethod
            def deduct_as_percentage() -> typing.Type['BenefitTypeRequirementsDeductAsPercentage']:
                return BenefitTypeRequirementsDeductAsPercentage
        
            @staticmethod
            def catch_up() -> typing.Type['BenefitTypeRequirementsCatchUp']:
                return BenefitTypeRequirementsCatchUp
        
            @staticmethod
            def limit_option() -> typing.Type['BenefitTypeRequirementsLimitOption']:
                return BenefitTypeRequirementsLimitOption
        
            @staticmethod
            def company_contribution_annual_maximum() -> typing.Type['BenefitTypeRequirementsCompanyContributionAnnualMaximum']:
                return BenefitTypeRequirementsCompanyContributionAnnualMaximum
        
            @staticmethod
            def coverage_salary_multiplier() -> typing.Type['BenefitTypeRequirementsCoverageSalaryMultiplier']:
                return BenefitTypeRequirementsCoverageSalaryMultiplier
        
            @staticmethod
            def coverage_amount() -> typing.Type['BenefitTypeRequirementsCoverageAmount']:
                return BenefitTypeRequirementsCoverageAmount
            __annotations__ = {
                "employee_deduction": employee_deduction,
                "contribution": contribution,
                "deduct_as_percentage": deduct_as_percentage,
                "catch_up": catch_up,
                "limit_option": limit_option,
                "company_contribution_annual_maximum": company_contribution_annual_maximum,
                "coverage_salary_multiplier": coverage_salary_multiplier,
                "coverage_amount": coverage_amount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_deduction"]) -> 'BenefitTypeRequirementsEmployeeDeduction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contribution"]) -> 'BenefitTypeRequirementsContribution': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deduct_as_percentage"]) -> 'BenefitTypeRequirementsDeductAsPercentage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["catch_up"]) -> 'BenefitTypeRequirementsCatchUp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit_option"]) -> 'BenefitTypeRequirementsLimitOption': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_contribution_annual_maximum"]) -> 'BenefitTypeRequirementsCompanyContributionAnnualMaximum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverage_salary_multiplier"]) -> 'BenefitTypeRequirementsCoverageSalaryMultiplier': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverage_amount"]) -> 'BenefitTypeRequirementsCoverageAmount': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employee_deduction", "contribution", "deduct_as_percentage", "catch_up", "limit_option", "company_contribution_annual_maximum", "coverage_salary_multiplier", "coverage_amount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_deduction"]) -> typing.Union['BenefitTypeRequirementsEmployeeDeduction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contribution"]) -> typing.Union['BenefitTypeRequirementsContribution', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deduct_as_percentage"]) -> typing.Union['BenefitTypeRequirementsDeductAsPercentage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["catch_up"]) -> typing.Union['BenefitTypeRequirementsCatchUp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit_option"]) -> typing.Union['BenefitTypeRequirementsLimitOption', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_contribution_annual_maximum"]) -> typing.Union['BenefitTypeRequirementsCompanyContributionAnnualMaximum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverage_salary_multiplier"]) -> typing.Union['BenefitTypeRequirementsCoverageSalaryMultiplier', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverage_amount"]) -> typing.Union['BenefitTypeRequirementsCoverageAmount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employee_deduction", "contribution", "deduct_as_percentage", "catch_up", "limit_option", "company_contribution_annual_maximum", "coverage_salary_multiplier", "coverage_amount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employee_deduction: typing.Union['BenefitTypeRequirementsEmployeeDeduction', schemas.Unset] = schemas.unset,
        contribution: typing.Union['BenefitTypeRequirementsContribution', schemas.Unset] = schemas.unset,
        deduct_as_percentage: typing.Union['BenefitTypeRequirementsDeductAsPercentage', schemas.Unset] = schemas.unset,
        catch_up: typing.Union['BenefitTypeRequirementsCatchUp', schemas.Unset] = schemas.unset,
        limit_option: typing.Union['BenefitTypeRequirementsLimitOption', schemas.Unset] = schemas.unset,
        company_contribution_annual_maximum: typing.Union['BenefitTypeRequirementsCompanyContributionAnnualMaximum', schemas.Unset] = schemas.unset,
        coverage_salary_multiplier: typing.Union['BenefitTypeRequirementsCoverageSalaryMultiplier', schemas.Unset] = schemas.unset,
        coverage_amount: typing.Union['BenefitTypeRequirementsCoverageAmount', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BenefitTypeRequirements':
        return super().__new__(
            cls,
            *args,
            employee_deduction=employee_deduction,
            contribution=contribution,
            deduct_as_percentage=deduct_as_percentage,
            catch_up=catch_up,
            limit_option=limit_option,
            company_contribution_annual_maximum=company_contribution_annual_maximum,
            coverage_salary_multiplier=coverage_salary_multiplier,
            coverage_amount=coverage_amount,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.benefit_type_requirements_catch_up import BenefitTypeRequirementsCatchUp
from gusto_embedded_payroll_python_sdk.model.benefit_type_requirements_company_contribution_annual_maximum import BenefitTypeRequirementsCompanyContributionAnnualMaximum
from gusto_embedded_payroll_python_sdk.model.benefit_type_requirements_contribution import BenefitTypeRequirementsContribution
from gusto_embedded_payroll_python_sdk.model.benefit_type_requirements_coverage_amount import BenefitTypeRequirementsCoverageAmount
from gusto_embedded_payroll_python_sdk.model.benefit_type_requirements_coverage_salary_multiplier import BenefitTypeRequirementsCoverageSalaryMultiplier
from gusto_embedded_payroll_python_sdk.model.benefit_type_requirements_deduct_as_percentage import BenefitTypeRequirementsDeductAsPercentage
from gusto_embedded_payroll_python_sdk.model.benefit_type_requirements_employee_deduction import BenefitTypeRequirementsEmployeeDeduction
from gusto_embedded_payroll_python_sdk.model.benefit_type_requirements_limit_option import BenefitTypeRequirementsLimitOption
