# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class CompanyBenefitsCreateBenefitRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "description",
            "benefit_id",
        }
        
        class properties:
            description = schemas.StrSchema
            benefit_type = schemas.NumberSchema
            active = schemas.BoolSchema
            responsible_for_employer_taxes = schemas.BoolSchema
            responsible_for_employee_w2 = schemas.BoolSchema
            __annotations__ = {
                "description": description,
                "benefit_type": benefit_type,
                "active": active,
                "responsible_for_employer_taxes": responsible_for_employer_taxes,
                "responsible_for_employee_w2": responsible_for_employee_w2,
            }
    
    description: MetaOapg.properties.description
    benefit_id: schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefit_type"]) -> MetaOapg.properties.benefit_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsible_for_employer_taxes"]) -> MetaOapg.properties.responsible_for_employer_taxes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsible_for_employee_w2"]) -> MetaOapg.properties.responsible_for_employee_w2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "benefit_type", "active", "responsible_for_employer_taxes", "responsible_for_employee_w2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefit_type"]) -> typing.Union[MetaOapg.properties.benefit_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsible_for_employer_taxes"]) -> typing.Union[MetaOapg.properties.responsible_for_employer_taxes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsible_for_employee_w2"]) -> typing.Union[MetaOapg.properties.responsible_for_employee_w2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "benefit_type", "active", "responsible_for_employer_taxes", "responsible_for_employee_w2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        benefit_id: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        benefit_type: typing.Union[MetaOapg.properties.benefit_type, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        responsible_for_employer_taxes: typing.Union[MetaOapg.properties.responsible_for_employer_taxes, bool, schemas.Unset] = schemas.unset,
        responsible_for_employee_w2: typing.Union[MetaOapg.properties.responsible_for_employee_w2, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompanyBenefitsCreateBenefitRequest':
        return super().__new__(
            cls,
            *args,
            description=description,
            benefit_id=benefit_id,
            benefit_type=benefit_type,
            active=active,
            responsible_for_employer_taxes=responsible_for_employer_taxes,
            responsible_for_employee_w2=responsible_for_employee_w2,
            _configuration=_configuration,
            **kwargs,
        )
