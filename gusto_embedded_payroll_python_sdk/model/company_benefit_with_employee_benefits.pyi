# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class CompanyBenefitWithEmployeeBenefits(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The representation of a company benefit.
    """


    class MetaOapg:
        
        class properties:
            
            
            class description(
                schemas.StrSchema
            ):
                pass
            version = schemas.StrSchema
            uuid = schemas.StrSchema
            benefit_type = schemas.NumberSchema
            active = schemas.BoolSchema
            deletable = schemas.BoolSchema
            supports_percentage_amounts = schemas.BoolSchema
            responsible_for_employer_taxes = schemas.BoolSchema
            responsible_for_employee_w2 = schemas.BoolSchema
        
            @staticmethod
            def employee_benefits() -> typing.Type['CompanyBenefitWithEmployeeBenefitsEmployeeBenefits']:
                return CompanyBenefitWithEmployeeBenefitsEmployeeBenefits
            __annotations__ = {
                "description": description,
                "version": version,
                "uuid": uuid,
                "benefit_type": benefit_type,
                "active": active,
                "deletable": deletable,
                "supports_percentage_amounts": supports_percentage_amounts,
                "responsible_for_employer_taxes": responsible_for_employer_taxes,
                "responsible_for_employee_w2": responsible_for_employee_w2,
                "employee_benefits": employee_benefits,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefit_type"]) -> MetaOapg.properties.benefit_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deletable"]) -> MetaOapg.properties.deletable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supports_percentage_amounts"]) -> MetaOapg.properties.supports_percentage_amounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsible_for_employer_taxes"]) -> MetaOapg.properties.responsible_for_employer_taxes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsible_for_employee_w2"]) -> MetaOapg.properties.responsible_for_employee_w2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_benefits"]) -> 'CompanyBenefitWithEmployeeBenefitsEmployeeBenefits': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "version", "uuid", "benefit_type", "active", "deletable", "supports_percentage_amounts", "responsible_for_employer_taxes", "responsible_for_employee_w2", "employee_benefits", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefit_type"]) -> typing.Union[MetaOapg.properties.benefit_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deletable"]) -> typing.Union[MetaOapg.properties.deletable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supports_percentage_amounts"]) -> typing.Union[MetaOapg.properties.supports_percentage_amounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsible_for_employer_taxes"]) -> typing.Union[MetaOapg.properties.responsible_for_employer_taxes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsible_for_employee_w2"]) -> typing.Union[MetaOapg.properties.responsible_for_employee_w2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_benefits"]) -> typing.Union['CompanyBenefitWithEmployeeBenefitsEmployeeBenefits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "version", "uuid", "benefit_type", "active", "deletable", "supports_percentage_amounts", "responsible_for_employer_taxes", "responsible_for_employee_w2", "employee_benefits", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        benefit_type: typing.Union[MetaOapg.properties.benefit_type, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        deletable: typing.Union[MetaOapg.properties.deletable, bool, schemas.Unset] = schemas.unset,
        supports_percentage_amounts: typing.Union[MetaOapg.properties.supports_percentage_amounts, bool, schemas.Unset] = schemas.unset,
        responsible_for_employer_taxes: typing.Union[MetaOapg.properties.responsible_for_employer_taxes, bool, schemas.Unset] = schemas.unset,
        responsible_for_employee_w2: typing.Union[MetaOapg.properties.responsible_for_employee_w2, bool, schemas.Unset] = schemas.unset,
        employee_benefits: typing.Union['CompanyBenefitWithEmployeeBenefitsEmployeeBenefits', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompanyBenefitWithEmployeeBenefits':
        return super().__new__(
            cls,
            *args,
            description=description,
            version=version,
            uuid=uuid,
            benefit_type=benefit_type,
            active=active,
            deletable=deletable,
            supports_percentage_amounts=supports_percentage_amounts,
            responsible_for_employer_taxes=responsible_for_employer_taxes,
            responsible_for_employee_w2=responsible_for_employee_w2,
            employee_benefits=employee_benefits,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.company_benefit_with_employee_benefits_employee_benefits import CompanyBenefitWithEmployeeBenefitsEmployeeBenefits
