# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class TimeOffPoliciesCalculateAccruingTimeOffHoursRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            regular_hours_worked = schemas.NumberSchema
            overtime_hours_worked = schemas.NumberSchema
            double_overtime_hours_worked = schemas.NumberSchema
            pto_hours_used = schemas.NumberSchema
            sick_hours_used = schemas.NumberSchema
            __annotations__ = {
                "regular_hours_worked": regular_hours_worked,
                "overtime_hours_worked": overtime_hours_worked,
                "double_overtime_hours_worked": double_overtime_hours_worked,
                "pto_hours_used": pto_hours_used,
                "sick_hours_used": sick_hours_used,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regular_hours_worked"]) -> MetaOapg.properties.regular_hours_worked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overtime_hours_worked"]) -> MetaOapg.properties.overtime_hours_worked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["double_overtime_hours_worked"]) -> MetaOapg.properties.double_overtime_hours_worked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pto_hours_used"]) -> MetaOapg.properties.pto_hours_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sick_hours_used"]) -> MetaOapg.properties.sick_hours_used: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["regular_hours_worked", "overtime_hours_worked", "double_overtime_hours_worked", "pto_hours_used", "sick_hours_used", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regular_hours_worked"]) -> typing.Union[MetaOapg.properties.regular_hours_worked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overtime_hours_worked"]) -> typing.Union[MetaOapg.properties.overtime_hours_worked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["double_overtime_hours_worked"]) -> typing.Union[MetaOapg.properties.double_overtime_hours_worked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pto_hours_used"]) -> typing.Union[MetaOapg.properties.pto_hours_used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sick_hours_used"]) -> typing.Union[MetaOapg.properties.sick_hours_used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["regular_hours_worked", "overtime_hours_worked", "double_overtime_hours_worked", "pto_hours_used", "sick_hours_used", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        regular_hours_worked: typing.Union[MetaOapg.properties.regular_hours_worked, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        overtime_hours_worked: typing.Union[MetaOapg.properties.overtime_hours_worked, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        double_overtime_hours_worked: typing.Union[MetaOapg.properties.double_overtime_hours_worked, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pto_hours_used: typing.Union[MetaOapg.properties.pto_hours_used, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sick_hours_used: typing.Union[MetaOapg.properties.sick_hours_used, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeOffPoliciesCalculateAccruingTimeOffHoursRequest':
        return super().__new__(
            cls,
            *args,
            regular_hours_worked=regular_hours_worked,
            overtime_hours_worked=overtime_hours_worked,
            double_overtime_hours_worked=double_overtime_hours_worked,
            pto_hours_used=pto_hours_used,
            sick_hours_used=sick_hours_used,
            _configuration=_configuration,
            **kwargs,
        )
