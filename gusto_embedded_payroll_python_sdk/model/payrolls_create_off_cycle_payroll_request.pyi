# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class PayrollsCreateOffCyclePayrollRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "end_date",
            "off_cycle",
            "off_cycle_reason",
            "start_date",
        }
        
        class properties:
            off_cycle = schemas.BoolSchema
            
            
            class off_cycle_reason(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BONUS(cls):
                    return cls("Bonus")
                
                @schemas.classproperty
                def CORRECTION(cls):
                    return cls("Correction")
                
                @schemas.classproperty
                def DISMISSED_EMPLOYEE(cls):
                    return cls("Dismissed employee")
                
                @schemas.classproperty
                def TRANSITION_FROM_OLD_PAY_SCHEDULE(cls):
                    return cls("Transition from old pay schedule")
            start_date = schemas.StrSchema
            end_date = schemas.StrSchema
            pay_schedule_uuid = schemas.StrSchema
        
            @staticmethod
            def employee_uuids() -> typing.Type['PayrollsCreateOffCyclePayrollRequestEmployeeUuids']:
                return PayrollsCreateOffCyclePayrollRequestEmployeeUuids
            check_date = schemas.StrSchema
            
            
            class withholding_pay_period(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EVERY_WEEK(cls):
                    return cls("Every week")
                
                @schemas.classproperty
                def EVERY_OTHER_WEEK(cls):
                    return cls("Every other week")
                
                @schemas.classproperty
                def TWICE_PER_MONTH(cls):
                    return cls("Twice per month")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("Monthly")
                
                @schemas.classproperty
                def QUARTERLY(cls):
                    return cls("Quarterly")
                
                @schemas.classproperty
                def SEMIANNUALLY(cls):
                    return cls("Semiannually")
                
                @schemas.classproperty
                def ANNUALLY(cls):
                    return cls("Annually")
            skip_regular_deductions = schemas.BoolSchema
            fixed_withholding_rate = schemas.BoolSchema
            __annotations__ = {
                "off_cycle": off_cycle,
                "off_cycle_reason": off_cycle_reason,
                "start_date": start_date,
                "end_date": end_date,
                "pay_schedule_uuid": pay_schedule_uuid,
                "employee_uuids": employee_uuids,
                "check_date": check_date,
                "withholding_pay_period": withholding_pay_period,
                "skip_regular_deductions": skip_regular_deductions,
                "fixed_withholding_rate": fixed_withholding_rate,
            }
    
    end_date: MetaOapg.properties.end_date
    off_cycle: MetaOapg.properties.off_cycle
    off_cycle_reason: MetaOapg.properties.off_cycle_reason
    start_date: MetaOapg.properties.start_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["off_cycle"]) -> MetaOapg.properties.off_cycle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["off_cycle_reason"]) -> MetaOapg.properties.off_cycle_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_schedule_uuid"]) -> MetaOapg.properties.pay_schedule_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_uuids"]) -> 'PayrollsCreateOffCyclePayrollRequestEmployeeUuids': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check_date"]) -> MetaOapg.properties.check_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["withholding_pay_period"]) -> MetaOapg.properties.withholding_pay_period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skip_regular_deductions"]) -> MetaOapg.properties.skip_regular_deductions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fixed_withholding_rate"]) -> MetaOapg.properties.fixed_withholding_rate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["off_cycle", "off_cycle_reason", "start_date", "end_date", "pay_schedule_uuid", "employee_uuids", "check_date", "withholding_pay_period", "skip_regular_deductions", "fixed_withholding_rate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["off_cycle"]) -> MetaOapg.properties.off_cycle: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["off_cycle_reason"]) -> MetaOapg.properties.off_cycle_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_schedule_uuid"]) -> typing.Union[MetaOapg.properties.pay_schedule_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_uuids"]) -> typing.Union['PayrollsCreateOffCyclePayrollRequestEmployeeUuids', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check_date"]) -> typing.Union[MetaOapg.properties.check_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["withholding_pay_period"]) -> typing.Union[MetaOapg.properties.withholding_pay_period, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skip_regular_deductions"]) -> typing.Union[MetaOapg.properties.skip_regular_deductions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fixed_withholding_rate"]) -> typing.Union[MetaOapg.properties.fixed_withholding_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["off_cycle", "off_cycle_reason", "start_date", "end_date", "pay_schedule_uuid", "employee_uuids", "check_date", "withholding_pay_period", "skip_regular_deductions", "fixed_withholding_rate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        end_date: typing.Union[MetaOapg.properties.end_date, str, ],
        off_cycle: typing.Union[MetaOapg.properties.off_cycle, bool, ],
        off_cycle_reason: typing.Union[MetaOapg.properties.off_cycle_reason, str, ],
        start_date: typing.Union[MetaOapg.properties.start_date, str, ],
        pay_schedule_uuid: typing.Union[MetaOapg.properties.pay_schedule_uuid, str, schemas.Unset] = schemas.unset,
        employee_uuids: typing.Union['PayrollsCreateOffCyclePayrollRequestEmployeeUuids', schemas.Unset] = schemas.unset,
        check_date: typing.Union[MetaOapg.properties.check_date, str, schemas.Unset] = schemas.unset,
        withholding_pay_period: typing.Union[MetaOapg.properties.withholding_pay_period, str, schemas.Unset] = schemas.unset,
        skip_regular_deductions: typing.Union[MetaOapg.properties.skip_regular_deductions, bool, schemas.Unset] = schemas.unset,
        fixed_withholding_rate: typing.Union[MetaOapg.properties.fixed_withholding_rate, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayrollsCreateOffCyclePayrollRequest':
        return super().__new__(
            cls,
            *args,
            end_date=end_date,
            off_cycle=off_cycle,
            off_cycle_reason=off_cycle_reason,
            start_date=start_date,
            pay_schedule_uuid=pay_schedule_uuid,
            employee_uuids=employee_uuids,
            check_date=check_date,
            withholding_pay_period=withholding_pay_period,
            skip_regular_deductions=skip_regular_deductions,
            fixed_withholding_rate=fixed_withholding_rate,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.payrolls_create_off_cycle_payroll_request_employee_uuids import PayrollsCreateOffCyclePayrollRequestEmployeeUuids
