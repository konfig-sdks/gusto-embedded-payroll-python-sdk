# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class TimeOffActivity(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Representation of a Time Off Activity
    """


    class MetaOapg:
        
        class properties:
            policy_uuid = schemas.StrSchema
            
            
            class time_off_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def VACATION(cls):
                    return cls("vacation")
                
                @schemas.classproperty
                def SICK(cls):
                    return cls("sick")
            policy_name = schemas.StrSchema
            event_type = schemas.StrSchema
            event_description = schemas.StrSchema
            effective_time = schemas.StrSchema
            balance = schemas.StrSchema
            balance_change = schemas.StrSchema
            __annotations__ = {
                "policy_uuid": policy_uuid,
                "time_off_type": time_off_type,
                "policy_name": policy_name,
                "event_type": event_type,
                "event_description": event_description,
                "effective_time": effective_time,
                "balance": balance,
                "balance_change": balance_change,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy_uuid"]) -> MetaOapg.properties.policy_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_off_type"]) -> MetaOapg.properties.time_off_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy_name"]) -> MetaOapg.properties.policy_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_type"]) -> MetaOapg.properties.event_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_description"]) -> MetaOapg.properties.event_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effective_time"]) -> MetaOapg.properties.effective_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance_change"]) -> MetaOapg.properties.balance_change: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["policy_uuid", "time_off_type", "policy_name", "event_type", "event_description", "effective_time", "balance", "balance_change", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy_uuid"]) -> typing.Union[MetaOapg.properties.policy_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_off_type"]) -> typing.Union[MetaOapg.properties.time_off_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy_name"]) -> typing.Union[MetaOapg.properties.policy_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_type"]) -> typing.Union[MetaOapg.properties.event_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_description"]) -> typing.Union[MetaOapg.properties.event_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effective_time"]) -> typing.Union[MetaOapg.properties.effective_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> typing.Union[MetaOapg.properties.balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance_change"]) -> typing.Union[MetaOapg.properties.balance_change, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["policy_uuid", "time_off_type", "policy_name", "event_type", "event_description", "effective_time", "balance", "balance_change", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        policy_uuid: typing.Union[MetaOapg.properties.policy_uuid, str, schemas.Unset] = schemas.unset,
        time_off_type: typing.Union[MetaOapg.properties.time_off_type, str, schemas.Unset] = schemas.unset,
        policy_name: typing.Union[MetaOapg.properties.policy_name, str, schemas.Unset] = schemas.unset,
        event_type: typing.Union[MetaOapg.properties.event_type, str, schemas.Unset] = schemas.unset,
        event_description: typing.Union[MetaOapg.properties.event_description, str, schemas.Unset] = schemas.unset,
        effective_time: typing.Union[MetaOapg.properties.effective_time, str, schemas.Unset] = schemas.unset,
        balance: typing.Union[MetaOapg.properties.balance, str, schemas.Unset] = schemas.unset,
        balance_change: typing.Union[MetaOapg.properties.balance_change, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeOffActivity':
        return super().__new__(
            cls,
            *args,
            policy_uuid=policy_uuid,
            time_off_type=time_off_type,
            policy_name=policy_name,
            event_type=event_type,
            event_description=event_description,
            effective_time=effective_time,
            balance=balance,
            balance_change=balance_change,
            _configuration=_configuration,
            **kwargs,
        )
