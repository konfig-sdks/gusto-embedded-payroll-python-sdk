# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class EmployeePayStub(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The representation of an employee pay stub information.
    """


    class MetaOapg:
        
        class properties:
            uuid = schemas.StrSchema
            check_date = schemas.StrSchema
            gross_pay = schemas.StrSchema
            net_pay = schemas.StrSchema
            payroll_uuid = schemas.StrSchema
            check_amount = schemas.StrSchema
            __annotations__ = {
                "uuid": uuid,
                "check_date": check_date,
                "gross_pay": gross_pay,
                "net_pay": net_pay,
                "payroll_uuid": payroll_uuid,
                "check_amount": check_amount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check_date"]) -> MetaOapg.properties.check_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_pay"]) -> MetaOapg.properties.gross_pay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["net_pay"]) -> MetaOapg.properties.net_pay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_uuid"]) -> MetaOapg.properties.payroll_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check_amount"]) -> MetaOapg.properties.check_amount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uuid", "check_date", "gross_pay", "net_pay", "payroll_uuid", "check_amount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check_date"]) -> typing.Union[MetaOapg.properties.check_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_pay"]) -> typing.Union[MetaOapg.properties.gross_pay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["net_pay"]) -> typing.Union[MetaOapg.properties.net_pay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_uuid"]) -> typing.Union[MetaOapg.properties.payroll_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check_amount"]) -> typing.Union[MetaOapg.properties.check_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uuid", "check_date", "gross_pay", "net_pay", "payroll_uuid", "check_amount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        check_date: typing.Union[MetaOapg.properties.check_date, str, schemas.Unset] = schemas.unset,
        gross_pay: typing.Union[MetaOapg.properties.gross_pay, str, schemas.Unset] = schemas.unset,
        net_pay: typing.Union[MetaOapg.properties.net_pay, str, schemas.Unset] = schemas.unset,
        payroll_uuid: typing.Union[MetaOapg.properties.payroll_uuid, str, schemas.Unset] = schemas.unset,
        check_amount: typing.Union[MetaOapg.properties.check_amount, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeePayStub':
        return super().__new__(
            cls,
            *args,
            uuid=uuid,
            check_date=check_date,
            gross_pay=gross_pay,
            net_pay=net_pay,
            payroll_uuid=payroll_uuid,
            check_amount=check_amount,
            _configuration=_configuration,
            **kwargs,
        )
