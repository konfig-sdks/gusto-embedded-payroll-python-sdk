# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class ContractorPayment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The representation of a single contractor payment.
    """


    class MetaOapg:
        
        class properties:
            uuid = schemas.StrSchema
            contractor_uuid = schemas.StrSchema
            bonus = schemas.StrSchema
            date = schemas.StrSchema
            hours = schemas.StrSchema
            
            
            class payment_method(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Direct Deposit": "DIRECT_DEPOSIT",
                        "Check": "CHECK",
                        "Historical Payment": "HISTORICAL_PAYMENT",
                        "Correction Payment": "CORRECTION_PAYMENT",
                    }
                
                @schemas.classproperty
                def DIRECT_DEPOSIT(cls):
                    return cls("Direct Deposit")
                
                @schemas.classproperty
                def CHECK(cls):
                    return cls("Check")
                
                @schemas.classproperty
                def HISTORICAL_PAYMENT(cls):
                    return cls("Historical Payment")
                
                @schemas.classproperty
                def CORRECTION_PAYMENT(cls):
                    return cls("Correction Payment")
            reimbursement = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Funded": "FUNDED",
                        "Unfunded": "UNFUNDED",
                    }
                
                @schemas.classproperty
                def FUNDED(cls):
                    return cls("Funded")
                
                @schemas.classproperty
                def UNFUNDED(cls):
                    return cls("Unfunded")
            hourly_rate = schemas.StrSchema
            may_cancel = schemas.BoolSchema
            wage = schemas.StrSchema
            
            
            class wage_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Hourly": "HOURLY",
                        "Fixed": "FIXED",
                    }
                
                @schemas.classproperty
                def HOURLY(cls):
                    return cls("Hourly")
                
                @schemas.classproperty
                def FIXED(cls):
                    return cls("Fixed")
            wage_total = schemas.StrSchema
            __annotations__ = {
                "uuid": uuid,
                "contractor_uuid": contractor_uuid,
                "bonus": bonus,
                "date": date,
                "hours": hours,
                "payment_method": payment_method,
                "reimbursement": reimbursement,
                "status": status,
                "hourly_rate": hourly_rate,
                "may_cancel": may_cancel,
                "wage": wage,
                "wage_type": wage_type,
                "wage_total": wage_total,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractor_uuid"]) -> MetaOapg.properties.contractor_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bonus"]) -> MetaOapg.properties.bonus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours"]) -> MetaOapg.properties.hours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method"]) -> MetaOapg.properties.payment_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reimbursement"]) -> MetaOapg.properties.reimbursement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourly_rate"]) -> MetaOapg.properties.hourly_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["may_cancel"]) -> MetaOapg.properties.may_cancel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wage"]) -> MetaOapg.properties.wage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wage_type"]) -> MetaOapg.properties.wage_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wage_total"]) -> MetaOapg.properties.wage_total: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uuid", "contractor_uuid", "bonus", "date", "hours", "payment_method", "reimbursement", "status", "hourly_rate", "may_cancel", "wage", "wage_type", "wage_total", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractor_uuid"]) -> typing.Union[MetaOapg.properties.contractor_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bonus"]) -> typing.Union[MetaOapg.properties.bonus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours"]) -> typing.Union[MetaOapg.properties.hours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method"]) -> typing.Union[MetaOapg.properties.payment_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reimbursement"]) -> typing.Union[MetaOapg.properties.reimbursement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourly_rate"]) -> typing.Union[MetaOapg.properties.hourly_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["may_cancel"]) -> typing.Union[MetaOapg.properties.may_cancel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wage"]) -> typing.Union[MetaOapg.properties.wage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wage_type"]) -> typing.Union[MetaOapg.properties.wage_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wage_total"]) -> typing.Union[MetaOapg.properties.wage_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uuid", "contractor_uuid", "bonus", "date", "hours", "payment_method", "reimbursement", "status", "hourly_rate", "may_cancel", "wage", "wage_type", "wage_total", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        contractor_uuid: typing.Union[MetaOapg.properties.contractor_uuid, str, schemas.Unset] = schemas.unset,
        bonus: typing.Union[MetaOapg.properties.bonus, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
        hours: typing.Union[MetaOapg.properties.hours, str, schemas.Unset] = schemas.unset,
        payment_method: typing.Union[MetaOapg.properties.payment_method, str, schemas.Unset] = schemas.unset,
        reimbursement: typing.Union[MetaOapg.properties.reimbursement, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        hourly_rate: typing.Union[MetaOapg.properties.hourly_rate, str, schemas.Unset] = schemas.unset,
        may_cancel: typing.Union[MetaOapg.properties.may_cancel, bool, schemas.Unset] = schemas.unset,
        wage: typing.Union[MetaOapg.properties.wage, str, schemas.Unset] = schemas.unset,
        wage_type: typing.Union[MetaOapg.properties.wage_type, str, schemas.Unset] = schemas.unset,
        wage_total: typing.Union[MetaOapg.properties.wage_total, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContractorPayment':
        return super().__new__(
            cls,
            *args,
            uuid=uuid,
            contractor_uuid=contractor_uuid,
            bonus=bonus,
            date=date,
            hours=hours,
            payment_method=payment_method,
            reimbursement=reimbursement,
            status=status,
            hourly_rate=hourly_rate,
            may_cancel=may_cancel,
            wage=wage,
            wage_type=wage_type,
            wage_total=wage_total,
            _configuration=_configuration,
            **kwargs,
        )
