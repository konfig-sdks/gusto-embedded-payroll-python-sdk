# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class BenefitSummaryEmployeesPayrollBenefits(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            payroll_uuid = schemas.StrSchema
            payroll_type = schemas.StrSchema
            check_date = schemas.StrSchema
            gross_pay = schemas.StrSchema
            company_benefit_deduction = schemas.StrSchema
            company_benefit_contribution = schemas.StrSchema
        
            @staticmethod
            def pay_period() -> typing.Type['BenefitSummaryEmployeesPayrollBenefitsPayPeriod']:
                return BenefitSummaryEmployeesPayrollBenefitsPayPeriod
            __annotations__ = {
                "payroll_uuid": payroll_uuid,
                "payroll_type": payroll_type,
                "check_date": check_date,
                "gross_pay": gross_pay,
                "company_benefit_deduction": company_benefit_deduction,
                "company_benefit_contribution": company_benefit_contribution,
                "pay_period": pay_period,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_uuid"]) -> MetaOapg.properties.payroll_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_type"]) -> MetaOapg.properties.payroll_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check_date"]) -> MetaOapg.properties.check_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_pay"]) -> MetaOapg.properties.gross_pay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_benefit_deduction"]) -> MetaOapg.properties.company_benefit_deduction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_benefit_contribution"]) -> MetaOapg.properties.company_benefit_contribution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_period"]) -> 'BenefitSummaryEmployeesPayrollBenefitsPayPeriod': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payroll_uuid", "payroll_type", "check_date", "gross_pay", "company_benefit_deduction", "company_benefit_contribution", "pay_period", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_uuid"]) -> typing.Union[MetaOapg.properties.payroll_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_type"]) -> typing.Union[MetaOapg.properties.payroll_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check_date"]) -> typing.Union[MetaOapg.properties.check_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_pay"]) -> typing.Union[MetaOapg.properties.gross_pay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_benefit_deduction"]) -> typing.Union[MetaOapg.properties.company_benefit_deduction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_benefit_contribution"]) -> typing.Union[MetaOapg.properties.company_benefit_contribution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_period"]) -> typing.Union['BenefitSummaryEmployeesPayrollBenefitsPayPeriod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payroll_uuid", "payroll_type", "check_date", "gross_pay", "company_benefit_deduction", "company_benefit_contribution", "pay_period", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payroll_uuid: typing.Union[MetaOapg.properties.payroll_uuid, str, schemas.Unset] = schemas.unset,
        payroll_type: typing.Union[MetaOapg.properties.payroll_type, str, schemas.Unset] = schemas.unset,
        check_date: typing.Union[MetaOapg.properties.check_date, str, schemas.Unset] = schemas.unset,
        gross_pay: typing.Union[MetaOapg.properties.gross_pay, str, schemas.Unset] = schemas.unset,
        company_benefit_deduction: typing.Union[MetaOapg.properties.company_benefit_deduction, str, schemas.Unset] = schemas.unset,
        company_benefit_contribution: typing.Union[MetaOapg.properties.company_benefit_contribution, str, schemas.Unset] = schemas.unset,
        pay_period: typing.Union['BenefitSummaryEmployeesPayrollBenefitsPayPeriod', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BenefitSummaryEmployeesPayrollBenefits':
        return super().__new__(
            cls,
            *args,
            payroll_uuid=payroll_uuid,
            payroll_type=payroll_type,
            check_date=check_date,
            gross_pay=gross_pay,
            company_benefit_deduction=company_benefit_deduction,
            company_benefit_contribution=company_benefit_contribution,
            pay_period=pay_period,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.benefit_summary_employees_payroll_benefits_pay_period import BenefitSummaryEmployeesPayrollBenefitsPayPeriod
