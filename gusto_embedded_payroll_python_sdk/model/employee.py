# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class Employee(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The representation of an employee in Gusto.
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            uuid = schemas.StrSchema
            first_name = schemas.StrSchema
            
            
            class middle_initial(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'middle_initial':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            last_name = schemas.StrSchema
            
            
            class email(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'email':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            company_uuid = schemas.StrSchema
            manager_uuid = schemas.StrSchema
            
            
            class department(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'department':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            terminated = schemas.BoolSchema
            two_percent_shareholder = schemas.BoolSchema
            onboarded = schemas.BoolSchema
            
            
            class onboarding_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "onboarding_completed": "ONBOARDING_COMPLETED",
                        "admin_onboarding_incomplete": "ADMIN_ONBOARDING_INCOMPLETE",
                        "self_onboarding_pending_invite": "SELF_ONBOARDING_PENDING_INVITE",
                        "self_onboarding_invited": "SELF_ONBOARDING_INVITED",
                        "self_onboarding_invited_started": "SELF_ONBOARDING_INVITED_STARTED",
                        "self_onboarding_invited_overdue": "SELF_ONBOARDING_INVITED_OVERDUE",
                        "self_onboarding_completed_by_employee": "SELF_ONBOARDING_COMPLETED_BY_EMPLOYEE",
                        "self_onboarding_awaiting_admin_review": "SELF_ONBOARDING_AWAITING_ADMIN_REVIEW",
                    }
                
                @schemas.classproperty
                def ONBOARDING_COMPLETED(cls):
                    return cls("onboarding_completed")
                
                @schemas.classproperty
                def ADMIN_ONBOARDING_INCOMPLETE(cls):
                    return cls("admin_onboarding_incomplete")
                
                @schemas.classproperty
                def SELF_ONBOARDING_PENDING_INVITE(cls):
                    return cls("self_onboarding_pending_invite")
                
                @schemas.classproperty
                def SELF_ONBOARDING_INVITED(cls):
                    return cls("self_onboarding_invited")
                
                @schemas.classproperty
                def SELF_ONBOARDING_INVITED_STARTED(cls):
                    return cls("self_onboarding_invited_started")
                
                @schemas.classproperty
                def SELF_ONBOARDING_INVITED_OVERDUE(cls):
                    return cls("self_onboarding_invited_overdue")
                
                @schemas.classproperty
                def SELF_ONBOARDING_COMPLETED_BY_EMPLOYEE(cls):
                    return cls("self_onboarding_completed_by_employee")
                
                @schemas.classproperty
                def SELF_ONBOARDING_AWAITING_ADMIN_REVIEW(cls):
                    return cls("self_onboarding_awaiting_admin_review")
            
            
            class jobs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Job']:
                        return Job
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Job'], typing.List['Job']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jobs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Job':
                    return super().__getitem__(i)
            
            
            class eligible_paid_time_off(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PaidTimeOff']:
                        return PaidTimeOff
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PaidTimeOff'], typing.List['PaidTimeOff']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'eligible_paid_time_off':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaidTimeOff':
                    return super().__getitem__(i)
            
            
            class terminations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Termination']:
                        return Termination
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Termination'], typing.List['Termination']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'terminations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Termination':
                    return super().__getitem__(i)
            
            
            class garnishments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Garnishment']:
                        return Garnishment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Garnishment'], typing.List['Garnishment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'garnishments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Garnishment':
                    return super().__getitem__(i)
            
            
            class custom_fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmployeeCustomField']:
                        return EmployeeCustomField
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmployeeCustomField'], typing.List['EmployeeCustomField']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmployeeCustomField':
                    return super().__getitem__(i)
            
            
            class date_of_birth(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'date_of_birth':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            has_ssn = schemas.BoolSchema
            ssn = schemas.StrSchema
            phone = schemas.StrSchema
            preferred_first_name = schemas.StrSchema
            
            
            class payment_method(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Direct Deposit": "DIRECT_DEPOSIT",
                        "Check": "CHECK",
                    }
                
                @schemas.classproperty
                def DIRECT_DEPOSIT(cls):
                    return cls("Direct Deposit")
                
                @schemas.classproperty
                def CHECK(cls):
                    return cls("Check")
            
            
            class work_email(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'work_email':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class current_employment_status(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "full_time": "FULL_TIME",
                        "part_time_under_twenty_hours": "PART_TIME_UNDER_TWENTY_HOURS",
                        "part_time_twenty_plus_hours": "PART_TIME_TWENTY_PLUS_HOURS",
                        "variable": "VARIABLE",
                        "seasonal": "SEASONAL",
                    }
                
                @schemas.classproperty
                def FULL_TIME(cls):
                    return cls("full_time")
                
                @schemas.classproperty
                def PART_TIME_UNDER_TWENTY_HOURS(cls):
                    return cls("part_time_under_twenty_hours")
                
                @schemas.classproperty
                def PART_TIME_TWENTY_PLUS_HOURS(cls):
                    return cls("part_time_twenty_plus_hours")
                
                @schemas.classproperty
                def VARIABLE(cls):
                    return cls("variable")
                
                @schemas.classproperty
                def SEASONAL(cls):
                    return cls("seasonal")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'current_employment_status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "version": version,
                "uuid": uuid,
                "first_name": first_name,
                "middle_initial": middle_initial,
                "last_name": last_name,
                "email": email,
                "company_uuid": company_uuid,
                "manager_uuid": manager_uuid,
                "department": department,
                "terminated": terminated,
                "two_percent_shareholder": two_percent_shareholder,
                "onboarded": onboarded,
                "onboarding_status": onboarding_status,
                "jobs": jobs,
                "eligible_paid_time_off": eligible_paid_time_off,
                "terminations": terminations,
                "garnishments": garnishments,
                "custom_fields": custom_fields,
                "date_of_birth": date_of_birth,
                "has_ssn": has_ssn,
                "ssn": ssn,
                "phone": phone,
                "preferred_first_name": preferred_first_name,
                "payment_method": payment_method,
                "work_email": work_email,
                "current_employment_status": current_employment_status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middle_initial"]) -> MetaOapg.properties.middle_initial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_uuid"]) -> MetaOapg.properties.company_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manager_uuid"]) -> MetaOapg.properties.manager_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> MetaOapg.properties.department: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminated"]) -> MetaOapg.properties.terminated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["two_percent_shareholder"]) -> MetaOapg.properties.two_percent_shareholder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboarded"]) -> MetaOapg.properties.onboarded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboarding_status"]) -> MetaOapg.properties.onboarding_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> MetaOapg.properties.jobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eligible_paid_time_off"]) -> MetaOapg.properties.eligible_paid_time_off: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminations"]) -> MetaOapg.properties.terminations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["garnishments"]) -> MetaOapg.properties.garnishments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_birth"]) -> MetaOapg.properties.date_of_birth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_ssn"]) -> MetaOapg.properties.has_ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred_first_name"]) -> MetaOapg.properties.preferred_first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method"]) -> MetaOapg.properties.payment_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work_email"]) -> MetaOapg.properties.work_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_employment_status"]) -> MetaOapg.properties.current_employment_status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "uuid", "first_name", "middle_initial", "last_name", "email", "company_uuid", "manager_uuid", "department", "terminated", "two_percent_shareholder", "onboarded", "onboarding_status", "jobs", "eligible_paid_time_off", "terminations", "garnishments", "custom_fields", "date_of_birth", "has_ssn", "ssn", "phone", "preferred_first_name", "payment_method", "work_email", "current_employment_status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union[MetaOapg.properties.first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middle_initial"]) -> typing.Union[MetaOapg.properties.middle_initial, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union[MetaOapg.properties.last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_uuid"]) -> typing.Union[MetaOapg.properties.company_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manager_uuid"]) -> typing.Union[MetaOapg.properties.manager_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union[MetaOapg.properties.department, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminated"]) -> typing.Union[MetaOapg.properties.terminated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["two_percent_shareholder"]) -> typing.Union[MetaOapg.properties.two_percent_shareholder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboarded"]) -> typing.Union[MetaOapg.properties.onboarded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboarding_status"]) -> typing.Union[MetaOapg.properties.onboarding_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> typing.Union[MetaOapg.properties.jobs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eligible_paid_time_off"]) -> typing.Union[MetaOapg.properties.eligible_paid_time_off, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminations"]) -> typing.Union[MetaOapg.properties.terminations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["garnishments"]) -> typing.Union[MetaOapg.properties.garnishments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_fields"]) -> typing.Union[MetaOapg.properties.custom_fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_birth"]) -> typing.Union[MetaOapg.properties.date_of_birth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_ssn"]) -> typing.Union[MetaOapg.properties.has_ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred_first_name"]) -> typing.Union[MetaOapg.properties.preferred_first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method"]) -> typing.Union[MetaOapg.properties.payment_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work_email"]) -> typing.Union[MetaOapg.properties.work_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_employment_status"]) -> typing.Union[MetaOapg.properties.current_employment_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "uuid", "first_name", "middle_initial", "last_name", "email", "company_uuid", "manager_uuid", "department", "terminated", "two_percent_shareholder", "onboarded", "onboarding_status", "jobs", "eligible_paid_time_off", "terminations", "garnishments", "custom_fields", "date_of_birth", "has_ssn", "ssn", "phone", "preferred_first_name", "payment_method", "work_email", "current_employment_status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        first_name: typing.Union[MetaOapg.properties.first_name, str, schemas.Unset] = schemas.unset,
        middle_initial: typing.Union[MetaOapg.properties.middle_initial, None, str, schemas.Unset] = schemas.unset,
        last_name: typing.Union[MetaOapg.properties.last_name, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, None, str, schemas.Unset] = schemas.unset,
        company_uuid: typing.Union[MetaOapg.properties.company_uuid, str, schemas.Unset] = schemas.unset,
        manager_uuid: typing.Union[MetaOapg.properties.manager_uuid, str, schemas.Unset] = schemas.unset,
        department: typing.Union[MetaOapg.properties.department, None, str, schemas.Unset] = schemas.unset,
        terminated: typing.Union[MetaOapg.properties.terminated, bool, schemas.Unset] = schemas.unset,
        two_percent_shareholder: typing.Union[MetaOapg.properties.two_percent_shareholder, bool, schemas.Unset] = schemas.unset,
        onboarded: typing.Union[MetaOapg.properties.onboarded, bool, schemas.Unset] = schemas.unset,
        onboarding_status: typing.Union[MetaOapg.properties.onboarding_status, str, schemas.Unset] = schemas.unset,
        jobs: typing.Union[MetaOapg.properties.jobs, list, tuple, schemas.Unset] = schemas.unset,
        eligible_paid_time_off: typing.Union[MetaOapg.properties.eligible_paid_time_off, list, tuple, schemas.Unset] = schemas.unset,
        terminations: typing.Union[MetaOapg.properties.terminations, list, tuple, schemas.Unset] = schemas.unset,
        garnishments: typing.Union[MetaOapg.properties.garnishments, list, tuple, schemas.Unset] = schemas.unset,
        custom_fields: typing.Union[MetaOapg.properties.custom_fields, list, tuple, schemas.Unset] = schemas.unset,
        date_of_birth: typing.Union[MetaOapg.properties.date_of_birth, None, str, schemas.Unset] = schemas.unset,
        has_ssn: typing.Union[MetaOapg.properties.has_ssn, bool, schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, str, schemas.Unset] = schemas.unset,
        phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
        preferred_first_name: typing.Union[MetaOapg.properties.preferred_first_name, str, schemas.Unset] = schemas.unset,
        payment_method: typing.Union[MetaOapg.properties.payment_method, str, schemas.Unset] = schemas.unset,
        work_email: typing.Union[MetaOapg.properties.work_email, None, str, schemas.Unset] = schemas.unset,
        current_employment_status: typing.Union[MetaOapg.properties.current_employment_status, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Employee':
        return super().__new__(
            cls,
            *args,
            version=version,
            uuid=uuid,
            first_name=first_name,
            middle_initial=middle_initial,
            last_name=last_name,
            email=email,
            company_uuid=company_uuid,
            manager_uuid=manager_uuid,
            department=department,
            terminated=terminated,
            two_percent_shareholder=two_percent_shareholder,
            onboarded=onboarded,
            onboarding_status=onboarding_status,
            jobs=jobs,
            eligible_paid_time_off=eligible_paid_time_off,
            terminations=terminations,
            garnishments=garnishments,
            custom_fields=custom_fields,
            date_of_birth=date_of_birth,
            has_ssn=has_ssn,
            ssn=ssn,
            phone=phone,
            preferred_first_name=preferred_first_name,
            payment_method=payment_method,
            work_email=work_email,
            current_employment_status=current_employment_status,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.employee_custom_field import EmployeeCustomField
from gusto_embedded_payroll_python_sdk.model.garnishment import Garnishment
from gusto_embedded_payroll_python_sdk.model.job import Job
from gusto_embedded_payroll_python_sdk.model.paid_time_off import PaidTimeOff
from gusto_embedded_payroll_python_sdk.model.termination import Termination
