# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class TaxRequirementMetadata(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "type",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TEXT(cls):
                    return cls("text")
                
                @schemas.classproperty
                def CURRENCY(cls):
                    return cls("currency")
                
                @schemas.classproperty
                def RADIO(cls):
                    return cls("radio")
                
                @schemas.classproperty
                def SELECT(cls):
                    return cls("select")
                
                @schemas.classproperty
                def PERCENT(cls):
                    return cls("percent")
                
                @schemas.classproperty
                def ACCOUNT_NUMBER(cls):
                    return cls("account_number")
                
                @schemas.classproperty
                def TAX_RATE(cls):
                    return cls("tax_rate")
                
                @schemas.classproperty
                def WORKERS_COMPENSATION_RATE(cls):
                    return cls("workers_compensation_rate")
        
            @staticmethod
            def options() -> typing.Type['TaxRequirementMetadataOptions']:
                return TaxRequirementMetadataOptions
            risk_class_code = schemas.StrSchema
            risk_class_description = schemas.StrSchema
            
            
            class rate_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PERCENT(cls):
                    return cls("percent")
                
                @schemas.classproperty
                def CURRENCY_PER_HOUR(cls):
                    return cls("currency_per_hour")
            mask = schemas.StrSchema
            prefix = schemas.StrSchema
        
            @staticmethod
            def validation() -> typing.Type['TaxRequirementMetadataValidation']:
                return TaxRequirementMetadataValidation
            __annotations__ = {
                "type": type,
                "options": options,
                "risk_class_code": risk_class_code,
                "risk_class_description": risk_class_description,
                "rate_type": rate_type,
                "mask": mask,
                "prefix": prefix,
                "validation": validation,
            }
    
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'TaxRequirementMetadataOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["risk_class_code"]) -> MetaOapg.properties.risk_class_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["risk_class_description"]) -> MetaOapg.properties.risk_class_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate_type"]) -> MetaOapg.properties.rate_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mask"]) -> MetaOapg.properties.mask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefix"]) -> MetaOapg.properties.prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validation"]) -> 'TaxRequirementMetadataValidation': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "options", "risk_class_code", "risk_class_description", "rate_type", "mask", "prefix", "validation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union['TaxRequirementMetadataOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["risk_class_code"]) -> typing.Union[MetaOapg.properties.risk_class_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["risk_class_description"]) -> typing.Union[MetaOapg.properties.risk_class_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate_type"]) -> typing.Union[MetaOapg.properties.rate_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mask"]) -> typing.Union[MetaOapg.properties.mask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefix"]) -> typing.Union[MetaOapg.properties.prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validation"]) -> typing.Union['TaxRequirementMetadataValidation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "options", "risk_class_code", "risk_class_description", "rate_type", "mask", "prefix", "validation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        options: typing.Union['TaxRequirementMetadataOptions', schemas.Unset] = schemas.unset,
        risk_class_code: typing.Union[MetaOapg.properties.risk_class_code, str, schemas.Unset] = schemas.unset,
        risk_class_description: typing.Union[MetaOapg.properties.risk_class_description, str, schemas.Unset] = schemas.unset,
        rate_type: typing.Union[MetaOapg.properties.rate_type, str, schemas.Unset] = schemas.unset,
        mask: typing.Union[MetaOapg.properties.mask, str, schemas.Unset] = schemas.unset,
        prefix: typing.Union[MetaOapg.properties.prefix, str, schemas.Unset] = schemas.unset,
        validation: typing.Union['TaxRequirementMetadataValidation', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaxRequirementMetadata':
        return super().__new__(
            cls,
            *args,
            type=type,
            options=options,
            risk_class_code=risk_class_code,
            risk_class_description=risk_class_description,
            rate_type=rate_type,
            mask=mask,
            prefix=prefix,
            validation=validation,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.tax_requirement_metadata_options import TaxRequirementMetadataOptions
from gusto_embedded_payroll_python_sdk.model.tax_requirement_metadata_validation import TaxRequirementMetadataValidation
