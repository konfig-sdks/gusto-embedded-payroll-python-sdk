# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class BenefitSummaryEmployees(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            uuid = schemas.StrSchema
            company_benefit_deduction = schemas.StrSchema
            company_benefit_contribution = schemas.StrSchema
            benefit_deduction = schemas.StrSchema
            benefit_contribution = schemas.StrSchema
            gross_pay = schemas.StrSchema
        
            @staticmethod
            def payroll_benefits() -> typing.Type['BenefitSummaryEmployeesPayrollBenefits']:
                return BenefitSummaryEmployeesPayrollBenefits
            __annotations__ = {
                "uuid": uuid,
                "company_benefit_deduction": company_benefit_deduction,
                "company_benefit_contribution": company_benefit_contribution,
                "benefit_deduction": benefit_deduction,
                "benefit_contribution": benefit_contribution,
                "gross_pay": gross_pay,
                "payroll_benefits": payroll_benefits,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_benefit_deduction"]) -> MetaOapg.properties.company_benefit_deduction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_benefit_contribution"]) -> MetaOapg.properties.company_benefit_contribution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefit_deduction"]) -> MetaOapg.properties.benefit_deduction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefit_contribution"]) -> MetaOapg.properties.benefit_contribution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_pay"]) -> MetaOapg.properties.gross_pay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_benefits"]) -> 'BenefitSummaryEmployeesPayrollBenefits': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uuid", "company_benefit_deduction", "company_benefit_contribution", "benefit_deduction", "benefit_contribution", "gross_pay", "payroll_benefits", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_benefit_deduction"]) -> typing.Union[MetaOapg.properties.company_benefit_deduction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_benefit_contribution"]) -> typing.Union[MetaOapg.properties.company_benefit_contribution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefit_deduction"]) -> typing.Union[MetaOapg.properties.benefit_deduction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefit_contribution"]) -> typing.Union[MetaOapg.properties.benefit_contribution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_pay"]) -> typing.Union[MetaOapg.properties.gross_pay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_benefits"]) -> typing.Union['BenefitSummaryEmployeesPayrollBenefits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uuid", "company_benefit_deduction", "company_benefit_contribution", "benefit_deduction", "benefit_contribution", "gross_pay", "payroll_benefits", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        company_benefit_deduction: typing.Union[MetaOapg.properties.company_benefit_deduction, str, schemas.Unset] = schemas.unset,
        company_benefit_contribution: typing.Union[MetaOapg.properties.company_benefit_contribution, str, schemas.Unset] = schemas.unset,
        benefit_deduction: typing.Union[MetaOapg.properties.benefit_deduction, str, schemas.Unset] = schemas.unset,
        benefit_contribution: typing.Union[MetaOapg.properties.benefit_contribution, str, schemas.Unset] = schemas.unset,
        gross_pay: typing.Union[MetaOapg.properties.gross_pay, str, schemas.Unset] = schemas.unset,
        payroll_benefits: typing.Union['BenefitSummaryEmployeesPayrollBenefits', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BenefitSummaryEmployees':
        return super().__new__(
            cls,
            *args,
            uuid=uuid,
            company_benefit_deduction=company_benefit_deduction,
            company_benefit_contribution=company_benefit_contribution,
            benefit_deduction=benefit_deduction,
            benefit_contribution=benefit_contribution,
            gross_pay=gross_pay,
            payroll_benefits=payroll_benefits,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.benefit_summary_employees_payroll_benefits import BenefitSummaryEmployeesPayrollBenefits
