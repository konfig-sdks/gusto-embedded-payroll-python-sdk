# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class EmployeeStateTaxQuestion(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "input_question_format",
            "answers",
            "description",
            "label",
            "key",
        }
        
        class properties:
            description = schemas.StrSchema
            label = schemas.StrSchema
            key = schemas.StrSchema
        
            @staticmethod
            def input_question_format() -> typing.Type['EmployeeStateTaxInputQuestionFormat']:
                return EmployeeStateTaxInputQuestionFormat
            
            
            class answers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmployeeStateTaxAnswer']:
                        return EmployeeStateTaxAnswer
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmployeeStateTaxAnswer'], typing.List['EmployeeStateTaxAnswer']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'answers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmployeeStateTaxAnswer':
                    return super().__getitem__(i)
            __annotations__ = {
                "description": description,
                "label": label,
                "key": key,
                "input_question_format": input_question_format,
                "answers": answers,
            }
    
    input_question_format: 'EmployeeStateTaxInputQuestionFormat'
    answers: MetaOapg.properties.answers
    description: MetaOapg.properties.description
    label: MetaOapg.properties.label
    key: MetaOapg.properties.key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input_question_format"]) -> 'EmployeeStateTaxInputQuestionFormat': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["answers"]) -> MetaOapg.properties.answers: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "label", "key", "input_question_format", "answers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["input_question_format"]) -> 'EmployeeStateTaxInputQuestionFormat': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["answers"]) -> MetaOapg.properties.answers: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "label", "key", "input_question_format", "answers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        input_question_format: 'EmployeeStateTaxInputQuestionFormat',
        answers: typing.Union[MetaOapg.properties.answers, list, tuple, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        key: typing.Union[MetaOapg.properties.key, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeStateTaxQuestion':
        return super().__new__(
            cls,
            *args,
            input_question_format=input_question_format,
            answers=answers,
            description=description,
            label=label,
            key=key,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.employee_state_tax_answer import EmployeeStateTaxAnswer
from gusto_embedded_payroll_python_sdk.model.employee_state_tax_input_question_format import EmployeeStateTaxInputQuestionFormat
