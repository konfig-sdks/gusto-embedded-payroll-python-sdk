# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class SupportedBenefit(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            benefit_type = schemas.NumberSchema
            name = schemas.StrSchema
            pretax = schemas.BoolSchema
            posttax = schemas.BoolSchema
            imputed = schemas.BoolSchema
            healthcare = schemas.BoolSchema
            retirement = schemas.BoolSchema
            yearly_limit = schemas.BoolSchema
            category = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "benefit_type": benefit_type,
                "name": name,
                "pretax": pretax,
                "posttax": posttax,
                "imputed": imputed,
                "healthcare": healthcare,
                "retirement": retirement,
                "yearly_limit": yearly_limit,
                "category": category,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefit_type"]) -> MetaOapg.properties.benefit_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pretax"]) -> MetaOapg.properties.pretax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["posttax"]) -> MetaOapg.properties.posttax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imputed"]) -> MetaOapg.properties.imputed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthcare"]) -> MetaOapg.properties.healthcare: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retirement"]) -> MetaOapg.properties.retirement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearly_limit"]) -> MetaOapg.properties.yearly_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "benefit_type", "name", "pretax", "posttax", "imputed", "healthcare", "retirement", "yearly_limit", "category", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefit_type"]) -> typing.Union[MetaOapg.properties.benefit_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pretax"]) -> typing.Union[MetaOapg.properties.pretax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["posttax"]) -> typing.Union[MetaOapg.properties.posttax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imputed"]) -> typing.Union[MetaOapg.properties.imputed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthcare"]) -> typing.Union[MetaOapg.properties.healthcare, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retirement"]) -> typing.Union[MetaOapg.properties.retirement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearly_limit"]) -> typing.Union[MetaOapg.properties.yearly_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "benefit_type", "name", "pretax", "posttax", "imputed", "healthcare", "retirement", "yearly_limit", "category", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        benefit_type: typing.Union[MetaOapg.properties.benefit_type, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        pretax: typing.Union[MetaOapg.properties.pretax, bool, schemas.Unset] = schemas.unset,
        posttax: typing.Union[MetaOapg.properties.posttax, bool, schemas.Unset] = schemas.unset,
        imputed: typing.Union[MetaOapg.properties.imputed, bool, schemas.Unset] = schemas.unset,
        healthcare: typing.Union[MetaOapg.properties.healthcare, bool, schemas.Unset] = schemas.unset,
        retirement: typing.Union[MetaOapg.properties.retirement, bool, schemas.Unset] = schemas.unset,
        yearly_limit: typing.Union[MetaOapg.properties.yearly_limit, bool, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SupportedBenefit':
        return super().__new__(
            cls,
            *args,
            description=description,
            benefit_type=benefit_type,
            name=name,
            pretax=pretax,
            posttax=posttax,
            imputed=imputed,
            healthcare=healthcare,
            retirement=retirement,
            yearly_limit=yearly_limit,
            category=category,
            _configuration=_configuration,
            **kwargs,
        )
