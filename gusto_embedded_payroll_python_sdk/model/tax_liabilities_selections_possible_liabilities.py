# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class TaxLiabilitiesSelectionsPossibleLiabilities(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Possible tax liabilities selections.
    """


    class MetaOapg:
        
        class properties:
            liability_amount = schemas.StrSchema
            payroll_check_date = schemas.StrSchema
            external_payroll_uuid = schemas.StrSchema
            __annotations__ = {
                "liability_amount": liability_amount,
                "payroll_check_date": payroll_check_date,
                "external_payroll_uuid": external_payroll_uuid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liability_amount"]) -> MetaOapg.properties.liability_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_check_date"]) -> MetaOapg.properties.payroll_check_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_payroll_uuid"]) -> MetaOapg.properties.external_payroll_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["liability_amount", "payroll_check_date", "external_payroll_uuid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liability_amount"]) -> typing.Union[MetaOapg.properties.liability_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_check_date"]) -> typing.Union[MetaOapg.properties.payroll_check_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_payroll_uuid"]) -> typing.Union[MetaOapg.properties.external_payroll_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["liability_amount", "payroll_check_date", "external_payroll_uuid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        liability_amount: typing.Union[MetaOapg.properties.liability_amount, str, schemas.Unset] = schemas.unset,
        payroll_check_date: typing.Union[MetaOapg.properties.payroll_check_date, str, schemas.Unset] = schemas.unset,
        external_payroll_uuid: typing.Union[MetaOapg.properties.external_payroll_uuid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaxLiabilitiesSelectionsPossibleLiabilities':
        return super().__new__(
            cls,
            *args,
            liability_amount=liability_amount,
            payroll_check_date=payroll_check_date,
            external_payroll_uuid=external_payroll_uuid,
            _configuration=_configuration,
            **kwargs,
        )
