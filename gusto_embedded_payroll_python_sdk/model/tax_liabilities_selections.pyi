# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class TaxLiabilitiesSelections(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The representation of tax liabilities selections.
    """


    class MetaOapg:
        
        class properties:
            tax_id = schemas.IntSchema
            tax_name = schemas.StrSchema
            
            
            class last_unpaid_external_payroll_uuid(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_unpaid_external_payroll_uuid':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def possible_liabilities() -> typing.Type['TaxLiabilitiesSelectionsPossibleLiabilities']:
                return TaxLiabilitiesSelectionsPossibleLiabilities
            __annotations__ = {
                "tax_id": tax_id,
                "tax_name": tax_name,
                "last_unpaid_external_payroll_uuid": last_unpaid_external_payroll_uuid,
                "possible_liabilities": possible_liabilities,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_id"]) -> MetaOapg.properties.tax_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_name"]) -> MetaOapg.properties.tax_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_unpaid_external_payroll_uuid"]) -> MetaOapg.properties.last_unpaid_external_payroll_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["possible_liabilities"]) -> 'TaxLiabilitiesSelectionsPossibleLiabilities': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tax_id", "tax_name", "last_unpaid_external_payroll_uuid", "possible_liabilities", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_id"]) -> typing.Union[MetaOapg.properties.tax_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_name"]) -> typing.Union[MetaOapg.properties.tax_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_unpaid_external_payroll_uuid"]) -> typing.Union[MetaOapg.properties.last_unpaid_external_payroll_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["possible_liabilities"]) -> typing.Union['TaxLiabilitiesSelectionsPossibleLiabilities', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tax_id", "tax_name", "last_unpaid_external_payroll_uuid", "possible_liabilities", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tax_id: typing.Union[MetaOapg.properties.tax_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tax_name: typing.Union[MetaOapg.properties.tax_name, str, schemas.Unset] = schemas.unset,
        last_unpaid_external_payroll_uuid: typing.Union[MetaOapg.properties.last_unpaid_external_payroll_uuid, None, str, schemas.Unset] = schemas.unset,
        possible_liabilities: typing.Union['TaxLiabilitiesSelectionsPossibleLiabilities', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaxLiabilitiesSelections':
        return super().__new__(
            cls,
            *args,
            tax_id=tax_id,
            tax_name=tax_name,
            last_unpaid_external_payroll_uuid=last_unpaid_external_payroll_uuid,
            possible_liabilities=possible_liabilities,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.tax_liabilities_selections_possible_liabilities import TaxLiabilitiesSelectionsPossibleLiabilities
