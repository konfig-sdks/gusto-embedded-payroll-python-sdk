# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class PayrollReceiptEmployeeCompensationsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            employee_uuid = schemas.StrSchema
            employee_first_name = schemas.StrSchema
            employee_last_name = schemas.StrSchema
            payment_method = schemas.StrSchema
            net_pay = schemas.StrSchema
            total_tax = schemas.StrSchema
            total_garnishments = schemas.StrSchema
            child_support_garnishment = schemas.StrSchema
            total_reimbursement = schemas.StrSchema
            __annotations__ = {
                "employee_uuid": employee_uuid,
                "employee_first_name": employee_first_name,
                "employee_last_name": employee_last_name,
                "payment_method": payment_method,
                "net_pay": net_pay,
                "total_tax": total_tax,
                "total_garnishments": total_garnishments,
                "child_support_garnishment": child_support_garnishment,
                "total_reimbursement": total_reimbursement,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_uuid"]) -> MetaOapg.properties.employee_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_first_name"]) -> MetaOapg.properties.employee_first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_last_name"]) -> MetaOapg.properties.employee_last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method"]) -> MetaOapg.properties.payment_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["net_pay"]) -> MetaOapg.properties.net_pay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_tax"]) -> MetaOapg.properties.total_tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_garnishments"]) -> MetaOapg.properties.total_garnishments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["child_support_garnishment"]) -> MetaOapg.properties.child_support_garnishment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_reimbursement"]) -> MetaOapg.properties.total_reimbursement: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employee_uuid", "employee_first_name", "employee_last_name", "payment_method", "net_pay", "total_tax", "total_garnishments", "child_support_garnishment", "total_reimbursement", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_uuid"]) -> typing.Union[MetaOapg.properties.employee_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_first_name"]) -> typing.Union[MetaOapg.properties.employee_first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_last_name"]) -> typing.Union[MetaOapg.properties.employee_last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method"]) -> typing.Union[MetaOapg.properties.payment_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["net_pay"]) -> typing.Union[MetaOapg.properties.net_pay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_tax"]) -> typing.Union[MetaOapg.properties.total_tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_garnishments"]) -> typing.Union[MetaOapg.properties.total_garnishments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["child_support_garnishment"]) -> typing.Union[MetaOapg.properties.child_support_garnishment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_reimbursement"]) -> typing.Union[MetaOapg.properties.total_reimbursement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employee_uuid", "employee_first_name", "employee_last_name", "payment_method", "net_pay", "total_tax", "total_garnishments", "child_support_garnishment", "total_reimbursement", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employee_uuid: typing.Union[MetaOapg.properties.employee_uuid, str, schemas.Unset] = schemas.unset,
        employee_first_name: typing.Union[MetaOapg.properties.employee_first_name, str, schemas.Unset] = schemas.unset,
        employee_last_name: typing.Union[MetaOapg.properties.employee_last_name, str, schemas.Unset] = schemas.unset,
        payment_method: typing.Union[MetaOapg.properties.payment_method, str, schemas.Unset] = schemas.unset,
        net_pay: typing.Union[MetaOapg.properties.net_pay, str, schemas.Unset] = schemas.unset,
        total_tax: typing.Union[MetaOapg.properties.total_tax, str, schemas.Unset] = schemas.unset,
        total_garnishments: typing.Union[MetaOapg.properties.total_garnishments, str, schemas.Unset] = schemas.unset,
        child_support_garnishment: typing.Union[MetaOapg.properties.child_support_garnishment, str, schemas.Unset] = schemas.unset,
        total_reimbursement: typing.Union[MetaOapg.properties.total_reimbursement, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayrollReceiptEmployeeCompensationsItem':
        return super().__new__(
            cls,
            *args,
            employee_uuid=employee_uuid,
            employee_first_name=employee_first_name,
            employee_last_name=employee_last_name,
            payment_method=payment_method,
            net_pay=net_pay,
            total_tax=total_tax,
            total_garnishments=total_garnishments,
            child_support_garnishment=child_support_garnishment,
            total_reimbursement=total_reimbursement,
            _configuration=_configuration,
            **kwargs,
        )
