# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class PayrollEmployeeCompensationsTypeItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            employee_uuid = schemas.StrSchema
            excluded = schemas.BoolSchema
            
            
            class gross_pay(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gross_pay':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class net_pay(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'net_pay':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class check_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'check_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class payment_method(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Check": "CHECK",
                        "Direct Deposit": "DIRECT_DEPOSIT",
                    }
                
                @schemas.classproperty
                def CHECK(cls):
                    return cls("Check")
                
                @schemas.classproperty
                def DIRECT_DEPOSIT(cls):
                    return cls("Direct Deposit")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payment_method':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class memo(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'memo':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def fixed_compensations() -> typing.Type['PayrollEmployeeCompensationsTypeItemFixedCompensations']:
                return PayrollEmployeeCompensationsTypeItemFixedCompensations
        
            @staticmethod
            def hourly_compensations() -> typing.Type['PayrollEmployeeCompensationsTypeItemHourlyCompensations']:
                return PayrollEmployeeCompensationsTypeItemHourlyCompensations
        
            @staticmethod
            def paid_time_off() -> typing.Type['PayrollEmployeeCompensationsTypeItemPaidTimeOff']:
                return PayrollEmployeeCompensationsTypeItemPaidTimeOff
        
            @staticmethod
            def benefits() -> typing.Type['PayrollEmployeeCompensationsTypeItemBenefits']:
                return PayrollEmployeeCompensationsTypeItemBenefits
        
            @staticmethod
            def deductions() -> typing.Type['PayrollEmployeeCompensationsTypeItemDeductions']:
                return PayrollEmployeeCompensationsTypeItemDeductions
        
            @staticmethod
            def taxes() -> typing.Type['PayrollEmployeeCompensationsTypeItemTaxes']:
                return PayrollEmployeeCompensationsTypeItemTaxes
            __annotations__ = {
                "version": version,
                "employee_uuid": employee_uuid,
                "excluded": excluded,
                "gross_pay": gross_pay,
                "net_pay": net_pay,
                "check_amount": check_amount,
                "payment_method": payment_method,
                "memo": memo,
                "fixed_compensations": fixed_compensations,
                "hourly_compensations": hourly_compensations,
                "paid_time_off": paid_time_off,
                "benefits": benefits,
                "deductions": deductions,
                "taxes": taxes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_uuid"]) -> MetaOapg.properties.employee_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excluded"]) -> MetaOapg.properties.excluded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_pay"]) -> MetaOapg.properties.gross_pay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["net_pay"]) -> MetaOapg.properties.net_pay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check_amount"]) -> MetaOapg.properties.check_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method"]) -> MetaOapg.properties.payment_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memo"]) -> MetaOapg.properties.memo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fixed_compensations"]) -> 'PayrollEmployeeCompensationsTypeItemFixedCompensations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourly_compensations"]) -> 'PayrollEmployeeCompensationsTypeItemHourlyCompensations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paid_time_off"]) -> 'PayrollEmployeeCompensationsTypeItemPaidTimeOff': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefits"]) -> 'PayrollEmployeeCompensationsTypeItemBenefits': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductions"]) -> 'PayrollEmployeeCompensationsTypeItemDeductions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxes"]) -> 'PayrollEmployeeCompensationsTypeItemTaxes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "employee_uuid", "excluded", "gross_pay", "net_pay", "check_amount", "payment_method", "memo", "fixed_compensations", "hourly_compensations", "paid_time_off", "benefits", "deductions", "taxes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_uuid"]) -> typing.Union[MetaOapg.properties.employee_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excluded"]) -> typing.Union[MetaOapg.properties.excluded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_pay"]) -> typing.Union[MetaOapg.properties.gross_pay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["net_pay"]) -> typing.Union[MetaOapg.properties.net_pay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check_amount"]) -> typing.Union[MetaOapg.properties.check_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method"]) -> typing.Union[MetaOapg.properties.payment_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memo"]) -> typing.Union[MetaOapg.properties.memo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fixed_compensations"]) -> typing.Union['PayrollEmployeeCompensationsTypeItemFixedCompensations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourly_compensations"]) -> typing.Union['PayrollEmployeeCompensationsTypeItemHourlyCompensations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paid_time_off"]) -> typing.Union['PayrollEmployeeCompensationsTypeItemPaidTimeOff', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefits"]) -> typing.Union['PayrollEmployeeCompensationsTypeItemBenefits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductions"]) -> typing.Union['PayrollEmployeeCompensationsTypeItemDeductions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxes"]) -> typing.Union['PayrollEmployeeCompensationsTypeItemTaxes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "employee_uuid", "excluded", "gross_pay", "net_pay", "check_amount", "payment_method", "memo", "fixed_compensations", "hourly_compensations", "paid_time_off", "benefits", "deductions", "taxes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        employee_uuid: typing.Union[MetaOapg.properties.employee_uuid, str, schemas.Unset] = schemas.unset,
        excluded: typing.Union[MetaOapg.properties.excluded, bool, schemas.Unset] = schemas.unset,
        gross_pay: typing.Union[MetaOapg.properties.gross_pay, None, str, schemas.Unset] = schemas.unset,
        net_pay: typing.Union[MetaOapg.properties.net_pay, None, str, schemas.Unset] = schemas.unset,
        check_amount: typing.Union[MetaOapg.properties.check_amount, None, str, schemas.Unset] = schemas.unset,
        payment_method: typing.Union[MetaOapg.properties.payment_method, None, str, schemas.Unset] = schemas.unset,
        memo: typing.Union[MetaOapg.properties.memo, None, str, schemas.Unset] = schemas.unset,
        fixed_compensations: typing.Union['PayrollEmployeeCompensationsTypeItemFixedCompensations', schemas.Unset] = schemas.unset,
        hourly_compensations: typing.Union['PayrollEmployeeCompensationsTypeItemHourlyCompensations', schemas.Unset] = schemas.unset,
        paid_time_off: typing.Union['PayrollEmployeeCompensationsTypeItemPaidTimeOff', schemas.Unset] = schemas.unset,
        benefits: typing.Union['PayrollEmployeeCompensationsTypeItemBenefits', schemas.Unset] = schemas.unset,
        deductions: typing.Union['PayrollEmployeeCompensationsTypeItemDeductions', schemas.Unset] = schemas.unset,
        taxes: typing.Union['PayrollEmployeeCompensationsTypeItemTaxes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayrollEmployeeCompensationsTypeItem':
        return super().__new__(
            cls,
            *args,
            version=version,
            employee_uuid=employee_uuid,
            excluded=excluded,
            gross_pay=gross_pay,
            net_pay=net_pay,
            check_amount=check_amount,
            payment_method=payment_method,
            memo=memo,
            fixed_compensations=fixed_compensations,
            hourly_compensations=hourly_compensations,
            paid_time_off=paid_time_off,
            benefits=benefits,
            deductions=deductions,
            taxes=taxes,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.payroll_employee_compensations_type_item_benefits import PayrollEmployeeCompensationsTypeItemBenefits
from gusto_embedded_payroll_python_sdk.model.payroll_employee_compensations_type_item_deductions import PayrollEmployeeCompensationsTypeItemDeductions
from gusto_embedded_payroll_python_sdk.model.payroll_employee_compensations_type_item_fixed_compensations import PayrollEmployeeCompensationsTypeItemFixedCompensations
from gusto_embedded_payroll_python_sdk.model.payroll_employee_compensations_type_item_hourly_compensations import PayrollEmployeeCompensationsTypeItemHourlyCompensations
from gusto_embedded_payroll_python_sdk.model.payroll_employee_compensations_type_item_paid_time_off import PayrollEmployeeCompensationsTypeItemPaidTimeOff
from gusto_embedded_payroll_python_sdk.model.payroll_employee_compensations_type_item_taxes import PayrollEmployeeCompensationsTypeItemTaxes
