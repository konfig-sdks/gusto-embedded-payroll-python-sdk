# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class EmployeeStateTax(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "employee_uuid",
            "questions",
            "state",
        }
        
        class properties:
            employee_uuid = schemas.StrSchema
            state = schemas.StrSchema
            
            
            class questions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmployeeStateTaxQuestion']:
                        return EmployeeStateTaxQuestion
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmployeeStateTaxQuestion'], typing.List['EmployeeStateTaxQuestion']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'questions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmployeeStateTaxQuestion':
                    return super().__getitem__(i)
            file_new_hire_report = schemas.BoolSchema
            is_work_state = schemas.BoolSchema
            __annotations__ = {
                "employee_uuid": employee_uuid,
                "state": state,
                "questions": questions,
                "file_new_hire_report": file_new_hire_report,
                "is_work_state": is_work_state,
            }
    
    employee_uuid: MetaOapg.properties.employee_uuid
    questions: MetaOapg.properties.questions
    state: MetaOapg.properties.state
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_uuid"]) -> MetaOapg.properties.employee_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["questions"]) -> MetaOapg.properties.questions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_new_hire_report"]) -> MetaOapg.properties.file_new_hire_report: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_work_state"]) -> MetaOapg.properties.is_work_state: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employee_uuid", "state", "questions", "file_new_hire_report", "is_work_state", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_uuid"]) -> MetaOapg.properties.employee_uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["questions"]) -> MetaOapg.properties.questions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_new_hire_report"]) -> typing.Union[MetaOapg.properties.file_new_hire_report, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_work_state"]) -> typing.Union[MetaOapg.properties.is_work_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employee_uuid", "state", "questions", "file_new_hire_report", "is_work_state", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employee_uuid: typing.Union[MetaOapg.properties.employee_uuid, str, ],
        questions: typing.Union[MetaOapg.properties.questions, list, tuple, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        file_new_hire_report: typing.Union[MetaOapg.properties.file_new_hire_report, bool, schemas.Unset] = schemas.unset,
        is_work_state: typing.Union[MetaOapg.properties.is_work_state, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeStateTax':
        return super().__new__(
            cls,
            *args,
            employee_uuid=employee_uuid,
            questions=questions,
            state=state,
            file_new_hire_report=file_new_hire_report,
            is_work_state=is_work_state,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.employee_state_tax_question import EmployeeStateTaxQuestion
