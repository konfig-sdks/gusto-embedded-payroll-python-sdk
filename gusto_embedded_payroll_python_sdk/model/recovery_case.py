# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class RecoveryCase(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Representation of a recovery case
    """


    class MetaOapg:
        
        class properties:
            uuid = schemas.StrSchema
            company_uuid = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "open": "OPEN",
                        "redebit_initiated": "REDEBIT_INITIATED",
                        "recovered": "RECOVERED",
                        "lost": "LOST",
                    }
                
                @schemas.classproperty
                def OPEN(cls):
                    return cls("open")
                
                @schemas.classproperty
                def REDEBIT_INITIATED(cls):
                    return cls("redebit_initiated")
                
                @schemas.classproperty
                def RECOVERED(cls):
                    return cls("recovered")
                
                @schemas.classproperty
                def LOST(cls):
                    return cls("lost")
            latest_error_code = schemas.StrSchema
            original_debit_date = schemas.StrSchema
            check_date = schemas.StrSchema
            payroll_uuid = schemas.StrSchema
        
            @staticmethod
            def contractor_payment_uuids() -> typing.Type['RecoveryCaseContractorPaymentUuids']:
                return RecoveryCaseContractorPaymentUuids
            amount_outstanding = schemas.StrSchema
            event_total_amount = schemas.StrSchema
            __annotations__ = {
                "uuid": uuid,
                "company_uuid": company_uuid,
                "status": status,
                "latest_error_code": latest_error_code,
                "original_debit_date": original_debit_date,
                "check_date": check_date,
                "payroll_uuid": payroll_uuid,
                "contractor_payment_uuids": contractor_payment_uuids,
                "amount_outstanding": amount_outstanding,
                "event_total_amount": event_total_amount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_uuid"]) -> MetaOapg.properties.company_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latest_error_code"]) -> MetaOapg.properties.latest_error_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_debit_date"]) -> MetaOapg.properties.original_debit_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["check_date"]) -> MetaOapg.properties.check_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_uuid"]) -> MetaOapg.properties.payroll_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractor_payment_uuids"]) -> 'RecoveryCaseContractorPaymentUuids': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount_outstanding"]) -> MetaOapg.properties.amount_outstanding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_total_amount"]) -> MetaOapg.properties.event_total_amount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uuid", "company_uuid", "status", "latest_error_code", "original_debit_date", "check_date", "payroll_uuid", "contractor_payment_uuids", "amount_outstanding", "event_total_amount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_uuid"]) -> typing.Union[MetaOapg.properties.company_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latest_error_code"]) -> typing.Union[MetaOapg.properties.latest_error_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_debit_date"]) -> typing.Union[MetaOapg.properties.original_debit_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["check_date"]) -> typing.Union[MetaOapg.properties.check_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_uuid"]) -> typing.Union[MetaOapg.properties.payroll_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractor_payment_uuids"]) -> typing.Union['RecoveryCaseContractorPaymentUuids', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount_outstanding"]) -> typing.Union[MetaOapg.properties.amount_outstanding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_total_amount"]) -> typing.Union[MetaOapg.properties.event_total_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uuid", "company_uuid", "status", "latest_error_code", "original_debit_date", "check_date", "payroll_uuid", "contractor_payment_uuids", "amount_outstanding", "event_total_amount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        company_uuid: typing.Union[MetaOapg.properties.company_uuid, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        latest_error_code: typing.Union[MetaOapg.properties.latest_error_code, str, schemas.Unset] = schemas.unset,
        original_debit_date: typing.Union[MetaOapg.properties.original_debit_date, str, schemas.Unset] = schemas.unset,
        check_date: typing.Union[MetaOapg.properties.check_date, str, schemas.Unset] = schemas.unset,
        payroll_uuid: typing.Union[MetaOapg.properties.payroll_uuid, str, schemas.Unset] = schemas.unset,
        contractor_payment_uuids: typing.Union['RecoveryCaseContractorPaymentUuids', schemas.Unset] = schemas.unset,
        amount_outstanding: typing.Union[MetaOapg.properties.amount_outstanding, str, schemas.Unset] = schemas.unset,
        event_total_amount: typing.Union[MetaOapg.properties.event_total_amount, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RecoveryCase':
        return super().__new__(
            cls,
            *args,
            uuid=uuid,
            company_uuid=company_uuid,
            status=status,
            latest_error_code=latest_error_code,
            original_debit_date=original_debit_date,
            check_date=check_date,
            payroll_uuid=payroll_uuid,
            contractor_payment_uuids=contractor_payment_uuids,
            amount_outstanding=amount_outstanding,
            event_total_amount=event_total_amount,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.recovery_case_contractor_payment_uuids import RecoveryCaseContractorPaymentUuids
