# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class PayScheduleAssignment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The representation of a pay schedule assignment.
    """


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SINGLE(cls):
                    return cls("single")
                
                @schemas.classproperty
                def HOURLY_SALARIED(cls):
                    return cls("hourly_salaried")
                
                @schemas.classproperty
                def BY_EMPLOYEE(cls):
                    return cls("by_employee")
                
                @schemas.classproperty
                def BY_DEPARTMENT(cls):
                    return cls("by_department")
            
            
            class hourly_pay_schedule_uuid(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hourly_pay_schedule_uuid':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class salaried_pay_schedule_uuid(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'salaried_pay_schedule_uuid':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class default_pay_schedule_uuid(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'default_pay_schedule_uuid':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employees(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayScheduleAssignmentEmployee']:
                        return PayScheduleAssignmentEmployee
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employees':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class departments(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayScheduleAssignmentDepartment']:
                        return PayScheduleAssignmentDepartment
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'departments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "type": type,
                "hourly_pay_schedule_uuid": hourly_pay_schedule_uuid,
                "salaried_pay_schedule_uuid": salaried_pay_schedule_uuid,
                "default_pay_schedule_uuid": default_pay_schedule_uuid,
                "employees": employees,
                "departments": departments,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourly_pay_schedule_uuid"]) -> MetaOapg.properties.hourly_pay_schedule_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salaried_pay_schedule_uuid"]) -> MetaOapg.properties.salaried_pay_schedule_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_pay_schedule_uuid"]) -> MetaOapg.properties.default_pay_schedule_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employees"]) -> MetaOapg.properties.employees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departments"]) -> MetaOapg.properties.departments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "hourly_pay_schedule_uuid", "salaried_pay_schedule_uuid", "default_pay_schedule_uuid", "employees", "departments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourly_pay_schedule_uuid"]) -> typing.Union[MetaOapg.properties.hourly_pay_schedule_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salaried_pay_schedule_uuid"]) -> typing.Union[MetaOapg.properties.salaried_pay_schedule_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_pay_schedule_uuid"]) -> typing.Union[MetaOapg.properties.default_pay_schedule_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employees"]) -> typing.Union[MetaOapg.properties.employees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departments"]) -> typing.Union[MetaOapg.properties.departments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "hourly_pay_schedule_uuid", "salaried_pay_schedule_uuid", "default_pay_schedule_uuid", "employees", "departments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        hourly_pay_schedule_uuid: typing.Union[MetaOapg.properties.hourly_pay_schedule_uuid, None, str, schemas.Unset] = schemas.unset,
        salaried_pay_schedule_uuid: typing.Union[MetaOapg.properties.salaried_pay_schedule_uuid, None, str, schemas.Unset] = schemas.unset,
        default_pay_schedule_uuid: typing.Union[MetaOapg.properties.default_pay_schedule_uuid, None, str, schemas.Unset] = schemas.unset,
        employees: typing.Union[MetaOapg.properties.employees, list, tuple, None, schemas.Unset] = schemas.unset,
        departments: typing.Union[MetaOapg.properties.departments, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayScheduleAssignment':
        return super().__new__(
            cls,
            *args,
            type=type,
            hourly_pay_schedule_uuid=hourly_pay_schedule_uuid,
            salaried_pay_schedule_uuid=salaried_pay_schedule_uuid,
            default_pay_schedule_uuid=default_pay_schedule_uuid,
            employees=employees,
            departments=departments,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.pay_schedule_assignment_department import PayScheduleAssignmentDepartment
from gusto_embedded_payroll_python_sdk.model.pay_schedule_assignment_employee import PayScheduleAssignmentEmployee
