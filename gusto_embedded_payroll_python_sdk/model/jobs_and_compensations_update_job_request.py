# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class JobsAndCompensationsUpdateJobRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "version",
        }
        
        class properties:
            version = schemas.StrSchema
            title = schemas.StrSchema
            hire_date = schemas.StrSchema
            two_percent_shareholder = schemas.BoolSchema
            state_wc_covered = schemas.BoolSchema
            state_wc_class_code = schemas.StrSchema
            __annotations__ = {
                "version": version,
                "title": title,
                "hire_date": hire_date,
                "two_percent_shareholder": two_percent_shareholder,
                "state_wc_covered": state_wc_covered,
                "state_wc_class_code": state_wc_class_code,
            }
    
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hire_date"]) -> MetaOapg.properties.hire_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["two_percent_shareholder"]) -> MetaOapg.properties.two_percent_shareholder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_wc_covered"]) -> MetaOapg.properties.state_wc_covered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_wc_class_code"]) -> MetaOapg.properties.state_wc_class_code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "title", "hire_date", "two_percent_shareholder", "state_wc_covered", "state_wc_class_code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hire_date"]) -> typing.Union[MetaOapg.properties.hire_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["two_percent_shareholder"]) -> typing.Union[MetaOapg.properties.two_percent_shareholder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_wc_covered"]) -> typing.Union[MetaOapg.properties.state_wc_covered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_wc_class_code"]) -> typing.Union[MetaOapg.properties.state_wc_class_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "title", "hire_date", "two_percent_shareholder", "state_wc_covered", "state_wc_class_code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        hire_date: typing.Union[MetaOapg.properties.hire_date, str, schemas.Unset] = schemas.unset,
        two_percent_shareholder: typing.Union[MetaOapg.properties.two_percent_shareholder, bool, schemas.Unset] = schemas.unset,
        state_wc_covered: typing.Union[MetaOapg.properties.state_wc_covered, bool, schemas.Unset] = schemas.unset,
        state_wc_class_code: typing.Union[MetaOapg.properties.state_wc_class_code, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobsAndCompensationsUpdateJobRequest':
        return super().__new__(
            cls,
            *args,
            version=version,
            title=title,
            hire_date=hire_date,
            two_percent_shareholder=two_percent_shareholder,
            state_wc_covered=state_wc_covered,
            state_wc_class_code=state_wc_class_code,
            _configuration=_configuration,
            **kwargs,
        )
