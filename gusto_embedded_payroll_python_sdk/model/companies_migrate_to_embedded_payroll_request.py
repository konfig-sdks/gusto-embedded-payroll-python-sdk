# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class CompaniesMigrateToEmbeddedPayrollRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "ip_address",
            "email",
            "external_user_id",
        }
        
        class properties:
            email = schemas.StrSchema
            ip_address = schemas.StrSchema
            external_user_id = schemas.StrSchema
            __annotations__ = {
                "email": email,
                "ip_address": ip_address,
                "external_user_id": external_user_id,
            }
    
    ip_address: MetaOapg.properties.ip_address
    email: MetaOapg.properties.email
    external_user_id: MetaOapg.properties.external_user_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_user_id"]) -> MetaOapg.properties.external_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "ip_address", "external_user_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_user_id"]) -> MetaOapg.properties.external_user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "ip_address", "external_user_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ip_address: typing.Union[MetaOapg.properties.ip_address, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        external_user_id: typing.Union[MetaOapg.properties.external_user_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompaniesMigrateToEmbeddedPayrollRequest':
        return super().__new__(
            cls,
            *args,
            ip_address=ip_address,
            email=email,
            external_user_id=external_user_id,
            _configuration=_configuration,
            **kwargs,
        )
