# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class InvoiceDataActiveCompaniesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            company_uuid = schemas.StrSchema
            active_employees = schemas.IntSchema
            active_contractors = schemas.IntSchema
            initial_invoice_period = schemas.StrSchema
            __annotations__ = {
                "company_uuid": company_uuid,
                "active_employees": active_employees,
                "active_contractors": active_contractors,
                "initial_invoice_period": initial_invoice_period,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_uuid"]) -> MetaOapg.properties.company_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active_employees"]) -> MetaOapg.properties.active_employees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active_contractors"]) -> MetaOapg.properties.active_contractors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initial_invoice_period"]) -> MetaOapg.properties.initial_invoice_period: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["company_uuid", "active_employees", "active_contractors", "initial_invoice_period", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_uuid"]) -> typing.Union[MetaOapg.properties.company_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active_employees"]) -> typing.Union[MetaOapg.properties.active_employees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active_contractors"]) -> typing.Union[MetaOapg.properties.active_contractors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initial_invoice_period"]) -> typing.Union[MetaOapg.properties.initial_invoice_period, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["company_uuid", "active_employees", "active_contractors", "initial_invoice_period", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        company_uuid: typing.Union[MetaOapg.properties.company_uuid, str, schemas.Unset] = schemas.unset,
        active_employees: typing.Union[MetaOapg.properties.active_employees, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        active_contractors: typing.Union[MetaOapg.properties.active_contractors, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        initial_invoice_period: typing.Union[MetaOapg.properties.initial_invoice_period, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvoiceDataActiveCompaniesItem':
        return super().__new__(
            cls,
            *args,
            company_uuid=company_uuid,
            active_employees=active_employees,
            active_contractors=active_contractors,
            initial_invoice_period=initial_invoice_period,
            _configuration=_configuration,
            **kwargs,
        )
