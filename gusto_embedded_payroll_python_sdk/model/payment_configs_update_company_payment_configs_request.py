# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class PaymentConfigsUpdateCompanyPaymentConfigsRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "payment_speed",
            "fast_payment_limit",
        }
        
        class properties:
            fast_payment_limit = schemas.StrSchema
            
            
            class payment_speed(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "1-day": "_1DAY",
                        "2-day": "_2DAY",
                        "4-day": "_4DAY",
                    }
                
                @schemas.classproperty
                def _1DAY(cls):
                    return cls("1-day")
                
                @schemas.classproperty
                def _2DAY(cls):
                    return cls("2-day")
                
                @schemas.classproperty
                def _4DAY(cls):
                    return cls("4-day")
            __annotations__ = {
                "fast_payment_limit": fast_payment_limit,
                "payment_speed": payment_speed,
            }
    
    payment_speed: MetaOapg.properties.payment_speed
    fast_payment_limit: MetaOapg.properties.fast_payment_limit
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fast_payment_limit"]) -> MetaOapg.properties.fast_payment_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_speed"]) -> MetaOapg.properties.payment_speed: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fast_payment_limit", "payment_speed", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fast_payment_limit"]) -> MetaOapg.properties.fast_payment_limit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_speed"]) -> MetaOapg.properties.payment_speed: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fast_payment_limit", "payment_speed", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payment_speed: typing.Union[MetaOapg.properties.payment_speed, str, ],
        fast_payment_limit: typing.Union[MetaOapg.properties.fast_payment_limit, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentConfigsUpdateCompanyPaymentConfigsRequest':
        return super().__new__(
            cls,
            *args,
            payment_speed=payment_speed,
            fast_payment_limit=fast_payment_limit,
            _configuration=_configuration,
            **kwargs,
        )
