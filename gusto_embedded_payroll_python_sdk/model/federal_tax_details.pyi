# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class FederalTaxDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            tax_payer_type = schemas.StrSchema
            taxable_as_scorp = schemas.BoolSchema
            filing_form = schemas.StrSchema
            has_ein = schemas.BoolSchema
            ein_verified = schemas.BoolSchema
            legal_name = schemas.StrSchema
            __annotations__ = {
                "version": version,
                "tax_payer_type": tax_payer_type,
                "taxable_as_scorp": taxable_as_scorp,
                "filing_form": filing_form,
                "has_ein": has_ein,
                "ein_verified": ein_verified,
                "legal_name": legal_name,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_payer_type"]) -> MetaOapg.properties.tax_payer_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxable_as_scorp"]) -> MetaOapg.properties.taxable_as_scorp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filing_form"]) -> MetaOapg.properties.filing_form: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_ein"]) -> MetaOapg.properties.has_ein: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ein_verified"]) -> MetaOapg.properties.ein_verified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legal_name"]) -> MetaOapg.properties.legal_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "tax_payer_type", "taxable_as_scorp", "filing_form", "has_ein", "ein_verified", "legal_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_payer_type"]) -> typing.Union[MetaOapg.properties.tax_payer_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxable_as_scorp"]) -> typing.Union[MetaOapg.properties.taxable_as_scorp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filing_form"]) -> typing.Union[MetaOapg.properties.filing_form, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_ein"]) -> typing.Union[MetaOapg.properties.has_ein, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ein_verified"]) -> typing.Union[MetaOapg.properties.ein_verified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legal_name"]) -> typing.Union[MetaOapg.properties.legal_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "tax_payer_type", "taxable_as_scorp", "filing_form", "has_ein", "ein_verified", "legal_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        tax_payer_type: typing.Union[MetaOapg.properties.tax_payer_type, str, schemas.Unset] = schemas.unset,
        taxable_as_scorp: typing.Union[MetaOapg.properties.taxable_as_scorp, bool, schemas.Unset] = schemas.unset,
        filing_form: typing.Union[MetaOapg.properties.filing_form, str, schemas.Unset] = schemas.unset,
        has_ein: typing.Union[MetaOapg.properties.has_ein, bool, schemas.Unset] = schemas.unset,
        ein_verified: typing.Union[MetaOapg.properties.ein_verified, bool, schemas.Unset] = schemas.unset,
        legal_name: typing.Union[MetaOapg.properties.legal_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FederalTaxDetails':
        return super().__new__(
            cls,
            *args,
            version=version,
            tax_payer_type=tax_payer_type,
            taxable_as_scorp=taxable_as_scorp,
            filing_form=filing_form,
            has_ein=has_ein,
            ein_verified=ein_verified,
            legal_name=legal_name,
            _configuration=_configuration,
            **kwargs,
        )
