# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class Compensation(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The representation of compensation in Gusto.
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            uuid = schemas.StrSchema
            job_uuid = schemas.StrSchema
            rate = schemas.StrSchema
            
            
            class payment_unit(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Hour": "HOUR",
                        "Week": "WEEK",
                        "Month": "MONTH",
                        "Year": "YEAR",
                        "Paycheck": "PAYCHECK",
                    }
                
                @schemas.classproperty
                def HOUR(cls):
                    return cls("Hour")
                
                @schemas.classproperty
                def WEEK(cls):
                    return cls("Week")
                
                @schemas.classproperty
                def MONTH(cls):
                    return cls("Month")
                
                @schemas.classproperty
                def YEAR(cls):
                    return cls("Year")
                
                @schemas.classproperty
                def PAYCHECK(cls):
                    return cls("Paycheck")
        
            @staticmethod
            def flsa_status() -> typing.Type['FlsaStatusType']:
                return FlsaStatusType
            effective_date = schemas.StrSchema
            adjust_for_minimum_wage = schemas.BoolSchema
            __annotations__ = {
                "version": version,
                "uuid": uuid,
                "job_uuid": job_uuid,
                "rate": rate,
                "payment_unit": payment_unit,
                "flsa_status": flsa_status,
                "effective_date": effective_date,
                "adjust_for_minimum_wage": adjust_for_minimum_wage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_uuid"]) -> MetaOapg.properties.job_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_unit"]) -> MetaOapg.properties.payment_unit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flsa_status"]) -> 'FlsaStatusType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effective_date"]) -> MetaOapg.properties.effective_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjust_for_minimum_wage"]) -> MetaOapg.properties.adjust_for_minimum_wage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "uuid", "job_uuid", "rate", "payment_unit", "flsa_status", "effective_date", "adjust_for_minimum_wage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_uuid"]) -> typing.Union[MetaOapg.properties.job_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_unit"]) -> typing.Union[MetaOapg.properties.payment_unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flsa_status"]) -> typing.Union['FlsaStatusType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effective_date"]) -> typing.Union[MetaOapg.properties.effective_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjust_for_minimum_wage"]) -> typing.Union[MetaOapg.properties.adjust_for_minimum_wage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "uuid", "job_uuid", "rate", "payment_unit", "flsa_status", "effective_date", "adjust_for_minimum_wage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        job_uuid: typing.Union[MetaOapg.properties.job_uuid, str, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, str, schemas.Unset] = schemas.unset,
        payment_unit: typing.Union[MetaOapg.properties.payment_unit, str, schemas.Unset] = schemas.unset,
        flsa_status: typing.Union['FlsaStatusType', schemas.Unset] = schemas.unset,
        effective_date: typing.Union[MetaOapg.properties.effective_date, str, schemas.Unset] = schemas.unset,
        adjust_for_minimum_wage: typing.Union[MetaOapg.properties.adjust_for_minimum_wage, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Compensation':
        return super().__new__(
            cls,
            *args,
            version=version,
            uuid=uuid,
            job_uuid=job_uuid,
            rate=rate,
            payment_unit=payment_unit,
            flsa_status=flsa_status,
            effective_date=effective_date,
            adjust_for_minimum_wage=adjust_for_minimum_wage,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.flsa_status_type import FlsaStatusType
