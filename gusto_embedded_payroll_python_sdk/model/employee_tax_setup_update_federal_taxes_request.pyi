# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class EmployeeTaxSetupUpdateFederalTaxesRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "version",
        }
        
        class properties:
            version = schemas.StrSchema
            filing_status = schemas.StrSchema
            
            
            class extra_withholding(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'extra_withholding':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            two_jobs = schemas.BoolSchema
            dependents_amount = schemas.StrSchema
            other_income = schemas.StrSchema
            deductions = schemas.StrSchema
            w4_data_type = schemas.StrSchema
            __annotations__ = {
                "version": version,
                "filing_status": filing_status,
                "extra_withholding": extra_withholding,
                "two_jobs": two_jobs,
                "dependents_amount": dependents_amount,
                "other_income": other_income,
                "deductions": deductions,
                "w4_data_type": w4_data_type,
            }
    
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filing_status"]) -> MetaOapg.properties.filing_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_withholding"]) -> MetaOapg.properties.extra_withholding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["two_jobs"]) -> MetaOapg.properties.two_jobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependents_amount"]) -> MetaOapg.properties.dependents_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other_income"]) -> MetaOapg.properties.other_income: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductions"]) -> MetaOapg.properties.deductions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["w4_data_type"]) -> MetaOapg.properties.w4_data_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "filing_status", "extra_withholding", "two_jobs", "dependents_amount", "other_income", "deductions", "w4_data_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filing_status"]) -> typing.Union[MetaOapg.properties.filing_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_withholding"]) -> typing.Union[MetaOapg.properties.extra_withholding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["two_jobs"]) -> typing.Union[MetaOapg.properties.two_jobs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependents_amount"]) -> typing.Union[MetaOapg.properties.dependents_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other_income"]) -> typing.Union[MetaOapg.properties.other_income, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductions"]) -> typing.Union[MetaOapg.properties.deductions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["w4_data_type"]) -> typing.Union[MetaOapg.properties.w4_data_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "filing_status", "extra_withholding", "two_jobs", "dependents_amount", "other_income", "deductions", "w4_data_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        filing_status: typing.Union[MetaOapg.properties.filing_status, str, schemas.Unset] = schemas.unset,
        extra_withholding: typing.Union[MetaOapg.properties.extra_withholding, None, str, schemas.Unset] = schemas.unset,
        two_jobs: typing.Union[MetaOapg.properties.two_jobs, bool, schemas.Unset] = schemas.unset,
        dependents_amount: typing.Union[MetaOapg.properties.dependents_amount, str, schemas.Unset] = schemas.unset,
        other_income: typing.Union[MetaOapg.properties.other_income, str, schemas.Unset] = schemas.unset,
        deductions: typing.Union[MetaOapg.properties.deductions, str, schemas.Unset] = schemas.unset,
        w4_data_type: typing.Union[MetaOapg.properties.w4_data_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeTaxSetupUpdateFederalTaxesRequest':
        return super().__new__(
            cls,
            *args,
            version=version,
            filing_status=filing_status,
            extra_withholding=extra_withholding,
            two_jobs=two_jobs,
            dependents_amount=dependents_amount,
            other_income=other_income,
            deductions=deductions,
            w4_data_type=w4_data_type,
            _configuration=_configuration,
            **kwargs,
        )
