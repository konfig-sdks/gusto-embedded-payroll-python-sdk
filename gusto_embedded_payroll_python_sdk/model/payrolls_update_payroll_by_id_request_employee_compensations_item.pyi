# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            employee_uuid = schemas.StrSchema
            excluded = schemas.BoolSchema
            
            
            class payment_method(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DIRECT_DEPOSIT(cls):
                    return cls("Direct Deposit")
                
                @schemas.classproperty
                def CHECK(cls):
                    return cls("Check")
            memo = schemas.StrSchema
        
            @staticmethod
            def fixed_compensations() -> typing.Type['PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemFixedCompensations']:
                return PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemFixedCompensations
        
            @staticmethod
            def hourly_compensations() -> typing.Type['PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemHourlyCompensations']:
                return PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemHourlyCompensations
        
            @staticmethod
            def paid_time_off() -> typing.Type['PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemPaidTimeOff']:
                return PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemPaidTimeOff
            __annotations__ = {
                "version": version,
                "employee_uuid": employee_uuid,
                "excluded": excluded,
                "payment_method": payment_method,
                "memo": memo,
                "fixed_compensations": fixed_compensations,
                "hourly_compensations": hourly_compensations,
                "paid_time_off": paid_time_off,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_uuid"]) -> MetaOapg.properties.employee_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excluded"]) -> MetaOapg.properties.excluded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method"]) -> MetaOapg.properties.payment_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memo"]) -> MetaOapg.properties.memo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fixed_compensations"]) -> 'PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemFixedCompensations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourly_compensations"]) -> 'PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemHourlyCompensations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paid_time_off"]) -> 'PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemPaidTimeOff': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "employee_uuid", "excluded", "payment_method", "memo", "fixed_compensations", "hourly_compensations", "paid_time_off", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_uuid"]) -> typing.Union[MetaOapg.properties.employee_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excluded"]) -> typing.Union[MetaOapg.properties.excluded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method"]) -> typing.Union[MetaOapg.properties.payment_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memo"]) -> typing.Union[MetaOapg.properties.memo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fixed_compensations"]) -> typing.Union['PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemFixedCompensations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourly_compensations"]) -> typing.Union['PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemHourlyCompensations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paid_time_off"]) -> typing.Union['PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemPaidTimeOff', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "employee_uuid", "excluded", "payment_method", "memo", "fixed_compensations", "hourly_compensations", "paid_time_off", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        employee_uuid: typing.Union[MetaOapg.properties.employee_uuid, str, schemas.Unset] = schemas.unset,
        excluded: typing.Union[MetaOapg.properties.excluded, bool, schemas.Unset] = schemas.unset,
        payment_method: typing.Union[MetaOapg.properties.payment_method, str, schemas.Unset] = schemas.unset,
        memo: typing.Union[MetaOapg.properties.memo, str, schemas.Unset] = schemas.unset,
        fixed_compensations: typing.Union['PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemFixedCompensations', schemas.Unset] = schemas.unset,
        hourly_compensations: typing.Union['PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemHourlyCompensations', schemas.Unset] = schemas.unset,
        paid_time_off: typing.Union['PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemPaidTimeOff', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItem':
        return super().__new__(
            cls,
            *args,
            version=version,
            employee_uuid=employee_uuid,
            excluded=excluded,
            payment_method=payment_method,
            memo=memo,
            fixed_compensations=fixed_compensations,
            hourly_compensations=hourly_compensations,
            paid_time_off=paid_time_off,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.payrolls_update_payroll_by_id_request_employee_compensations_item_fixed_compensations import PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemFixedCompensations
from gusto_embedded_payroll_python_sdk.model.payrolls_update_payroll_by_id_request_employee_compensations_item_hourly_compensations import PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemHourlyCompensations
from gusto_embedded_payroll_python_sdk.model.payrolls_update_payroll_by_id_request_employee_compensations_item_paid_time_off import PayrollsUpdatePayrollByIdRequestEmployeeCompensationsItemPaidTimeOff
