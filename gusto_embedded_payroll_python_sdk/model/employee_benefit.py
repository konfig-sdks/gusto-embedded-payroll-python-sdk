# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class EmployeeBenefit(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The representation of an employee benefit.
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            employee_uuid = schemas.StrSchema
            company_benefit_uuid = schemas.StrSchema
            active = schemas.BoolSchema
            uuid = schemas.StrSchema
            employee_deduction = schemas.StrSchema
            deduct_as_percentage = schemas.BoolSchema
            
            
            class employee_deduction_annual_maximum(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employee_deduction_annual_maximum':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def contribution() -> typing.Type['EmployeeBenefitContribution']:
                return EmployeeBenefitContribution
            elective = schemas.BoolSchema
            
            
            class company_contribution_annual_maximum(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'company_contribution_annual_maximum':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class limit_option(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'limit_option':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            catch_up = schemas.BoolSchema
            retirement_loan_identifier = schemas.StrSchema
            
            
            class coverage_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'coverage_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class deduction_reduces_taxable_income(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "unset": "UNSET",
                        "reduces_taxable_income": "REDUCES_TAXABLE_INCOME",
                        "does_not_reduce_taxable_income": "DOES_NOT_REDUCE_TAXABLE_INCOME",
                        None: "NONE",
                    }
                
                @schemas.classproperty
                def UNSET(cls):
                    return cls("unset")
                
                @schemas.classproperty
                def REDUCES_TAXABLE_INCOME(cls):
                    return cls("reduces_taxable_income")
                
                @schemas.classproperty
                def DOES_NOT_REDUCE_TAXABLE_INCOME(cls):
                    return cls("does_not_reduce_taxable_income")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deduction_reduces_taxable_income':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            coverage_salary_multiplier = schemas.StrSchema
            company_contribution = schemas.StrSchema
            contribute_as_percentage = schemas.BoolSchema
            __annotations__ = {
                "version": version,
                "employee_uuid": employee_uuid,
                "company_benefit_uuid": company_benefit_uuid,
                "active": active,
                "uuid": uuid,
                "employee_deduction": employee_deduction,
                "deduct_as_percentage": deduct_as_percentage,
                "employee_deduction_annual_maximum": employee_deduction_annual_maximum,
                "contribution": contribution,
                "elective": elective,
                "company_contribution_annual_maximum": company_contribution_annual_maximum,
                "limit_option": limit_option,
                "catch_up": catch_up,
                "retirement_loan_identifier": retirement_loan_identifier,
                "coverage_amount": coverage_amount,
                "deduction_reduces_taxable_income": deduction_reduces_taxable_income,
                "coverage_salary_multiplier": coverage_salary_multiplier,
                "company_contribution": company_contribution,
                "contribute_as_percentage": contribute_as_percentage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_uuid"]) -> MetaOapg.properties.employee_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_benefit_uuid"]) -> MetaOapg.properties.company_benefit_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_deduction"]) -> MetaOapg.properties.employee_deduction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deduct_as_percentage"]) -> MetaOapg.properties.deduct_as_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_deduction_annual_maximum"]) -> MetaOapg.properties.employee_deduction_annual_maximum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contribution"]) -> 'EmployeeBenefitContribution': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elective"]) -> MetaOapg.properties.elective: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_contribution_annual_maximum"]) -> MetaOapg.properties.company_contribution_annual_maximum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit_option"]) -> MetaOapg.properties.limit_option: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["catch_up"]) -> MetaOapg.properties.catch_up: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retirement_loan_identifier"]) -> MetaOapg.properties.retirement_loan_identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverage_amount"]) -> MetaOapg.properties.coverage_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deduction_reduces_taxable_income"]) -> MetaOapg.properties.deduction_reduces_taxable_income: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverage_salary_multiplier"]) -> MetaOapg.properties.coverage_salary_multiplier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_contribution"]) -> MetaOapg.properties.company_contribution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contribute_as_percentage"]) -> MetaOapg.properties.contribute_as_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "employee_uuid", "company_benefit_uuid", "active", "uuid", "employee_deduction", "deduct_as_percentage", "employee_deduction_annual_maximum", "contribution", "elective", "company_contribution_annual_maximum", "limit_option", "catch_up", "retirement_loan_identifier", "coverage_amount", "deduction_reduces_taxable_income", "coverage_salary_multiplier", "company_contribution", "contribute_as_percentage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_uuid"]) -> typing.Union[MetaOapg.properties.employee_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_benefit_uuid"]) -> typing.Union[MetaOapg.properties.company_benefit_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_deduction"]) -> typing.Union[MetaOapg.properties.employee_deduction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deduct_as_percentage"]) -> typing.Union[MetaOapg.properties.deduct_as_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_deduction_annual_maximum"]) -> typing.Union[MetaOapg.properties.employee_deduction_annual_maximum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contribution"]) -> typing.Union['EmployeeBenefitContribution', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elective"]) -> typing.Union[MetaOapg.properties.elective, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_contribution_annual_maximum"]) -> typing.Union[MetaOapg.properties.company_contribution_annual_maximum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit_option"]) -> typing.Union[MetaOapg.properties.limit_option, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["catch_up"]) -> typing.Union[MetaOapg.properties.catch_up, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retirement_loan_identifier"]) -> typing.Union[MetaOapg.properties.retirement_loan_identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverage_amount"]) -> typing.Union[MetaOapg.properties.coverage_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deduction_reduces_taxable_income"]) -> typing.Union[MetaOapg.properties.deduction_reduces_taxable_income, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverage_salary_multiplier"]) -> typing.Union[MetaOapg.properties.coverage_salary_multiplier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_contribution"]) -> typing.Union[MetaOapg.properties.company_contribution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contribute_as_percentage"]) -> typing.Union[MetaOapg.properties.contribute_as_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "employee_uuid", "company_benefit_uuid", "active", "uuid", "employee_deduction", "deduct_as_percentage", "employee_deduction_annual_maximum", "contribution", "elective", "company_contribution_annual_maximum", "limit_option", "catch_up", "retirement_loan_identifier", "coverage_amount", "deduction_reduces_taxable_income", "coverage_salary_multiplier", "company_contribution", "contribute_as_percentage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        employee_uuid: typing.Union[MetaOapg.properties.employee_uuid, str, schemas.Unset] = schemas.unset,
        company_benefit_uuid: typing.Union[MetaOapg.properties.company_benefit_uuid, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        employee_deduction: typing.Union[MetaOapg.properties.employee_deduction, str, schemas.Unset] = schemas.unset,
        deduct_as_percentage: typing.Union[MetaOapg.properties.deduct_as_percentage, bool, schemas.Unset] = schemas.unset,
        employee_deduction_annual_maximum: typing.Union[MetaOapg.properties.employee_deduction_annual_maximum, None, str, schemas.Unset] = schemas.unset,
        contribution: typing.Union['EmployeeBenefitContribution', schemas.Unset] = schemas.unset,
        elective: typing.Union[MetaOapg.properties.elective, bool, schemas.Unset] = schemas.unset,
        company_contribution_annual_maximum: typing.Union[MetaOapg.properties.company_contribution_annual_maximum, None, str, schemas.Unset] = schemas.unset,
        limit_option: typing.Union[MetaOapg.properties.limit_option, None, str, schemas.Unset] = schemas.unset,
        catch_up: typing.Union[MetaOapg.properties.catch_up, bool, schemas.Unset] = schemas.unset,
        retirement_loan_identifier: typing.Union[MetaOapg.properties.retirement_loan_identifier, str, schemas.Unset] = schemas.unset,
        coverage_amount: typing.Union[MetaOapg.properties.coverage_amount, None, str, schemas.Unset] = schemas.unset,
        deduction_reduces_taxable_income: typing.Union[MetaOapg.properties.deduction_reduces_taxable_income, None, str, schemas.Unset] = schemas.unset,
        coverage_salary_multiplier: typing.Union[MetaOapg.properties.coverage_salary_multiplier, str, schemas.Unset] = schemas.unset,
        company_contribution: typing.Union[MetaOapg.properties.company_contribution, str, schemas.Unset] = schemas.unset,
        contribute_as_percentage: typing.Union[MetaOapg.properties.contribute_as_percentage, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeBenefit':
        return super().__new__(
            cls,
            *args,
            version=version,
            employee_uuid=employee_uuid,
            company_benefit_uuid=company_benefit_uuid,
            active=active,
            uuid=uuid,
            employee_deduction=employee_deduction,
            deduct_as_percentage=deduct_as_percentage,
            employee_deduction_annual_maximum=employee_deduction_annual_maximum,
            contribution=contribution,
            elective=elective,
            company_contribution_annual_maximum=company_contribution_annual_maximum,
            limit_option=limit_option,
            catch_up=catch_up,
            retirement_loan_identifier=retirement_loan_identifier,
            coverage_amount=coverage_amount,
            deduction_reduces_taxable_income=deduction_reduces_taxable_income,
            coverage_salary_multiplier=coverage_salary_multiplier,
            company_contribution=company_contribution,
            contribute_as_percentage=contribute_as_percentage,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.employee_benefit_contribution import EmployeeBenefitContribution
