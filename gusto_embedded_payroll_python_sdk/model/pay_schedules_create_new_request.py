# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class PaySchedulesCreateNewRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "anchor_pay_date",
            "anchor_end_of_pay_period",
            "frequency",
        }
        
        class properties:
            
            
            class frequency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Every week": "EVERY_WEEK",
                        "Every other week": "EVERY_OTHER_WEEK",
                        "Twice per month": "TWICE_PER_MONTH",
                        "Monthly": "MONTHLY",
                    }
                
                @schemas.classproperty
                def EVERY_WEEK(cls):
                    return cls("Every week")
                
                @schemas.classproperty
                def EVERY_OTHER_WEEK(cls):
                    return cls("Every other week")
                
                @schemas.classproperty
                def TWICE_PER_MONTH(cls):
                    return cls("Twice per month")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("Monthly")
            anchor_pay_date = schemas.StrSchema
            anchor_end_of_pay_period = schemas.StrSchema
            
            
            class day_1(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'day_1':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class day_2(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'day_2':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            custom_name = schemas.StrSchema
            __annotations__ = {
                "frequency": frequency,
                "anchor_pay_date": anchor_pay_date,
                "anchor_end_of_pay_period": anchor_end_of_pay_period,
                "day_1": day_1,
                "day_2": day_2,
                "custom_name": custom_name,
            }
    
    anchor_pay_date: MetaOapg.properties.anchor_pay_date
    anchor_end_of_pay_period: MetaOapg.properties.anchor_end_of_pay_period
    frequency: MetaOapg.properties.frequency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anchor_pay_date"]) -> MetaOapg.properties.anchor_pay_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anchor_end_of_pay_period"]) -> MetaOapg.properties.anchor_end_of_pay_period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["day_1"]) -> MetaOapg.properties.day_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["day_2"]) -> MetaOapg.properties.day_2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_name"]) -> MetaOapg.properties.custom_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["frequency", "anchor_pay_date", "anchor_end_of_pay_period", "day_1", "day_2", "custom_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anchor_pay_date"]) -> MetaOapg.properties.anchor_pay_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anchor_end_of_pay_period"]) -> MetaOapg.properties.anchor_end_of_pay_period: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["day_1"]) -> typing.Union[MetaOapg.properties.day_1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["day_2"]) -> typing.Union[MetaOapg.properties.day_2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_name"]) -> typing.Union[MetaOapg.properties.custom_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["frequency", "anchor_pay_date", "anchor_end_of_pay_period", "day_1", "day_2", "custom_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        anchor_pay_date: typing.Union[MetaOapg.properties.anchor_pay_date, str, ],
        anchor_end_of_pay_period: typing.Union[MetaOapg.properties.anchor_end_of_pay_period, str, ],
        frequency: typing.Union[MetaOapg.properties.frequency, str, ],
        day_1: typing.Union[MetaOapg.properties.day_1, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        day_2: typing.Union[MetaOapg.properties.day_2, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        custom_name: typing.Union[MetaOapg.properties.custom_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaySchedulesCreateNewRequest':
        return super().__new__(
            cls,
            *args,
            anchor_pay_date=anchor_pay_date,
            anchor_end_of_pay_period=anchor_end_of_pay_period,
            frequency=frequency,
            day_1=day_1,
            day_2=day_2,
            custom_name=custom_name,
            _configuration=_configuration,
            **kwargs,
        )
