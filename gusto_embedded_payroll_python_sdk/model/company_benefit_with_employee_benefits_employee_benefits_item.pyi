# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gusto_embedded_payroll_python_sdk import schemas  # noqa: F401


class CompanyBenefitWithEmployeeBenefitsEmployeeBenefitsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            employee_uuid = schemas.StrSchema
            company_benefit_uuid = schemas.StrSchema
            active = schemas.BoolSchema
            deduct_as_percentage = schemas.BoolSchema
            employee_deduction = schemas.StrSchema
            company_contribution = schemas.StrSchema
            uuid = schemas.StrSchema
        
            @staticmethod
            def contribution() -> typing.Type['CompanyBenefitWithEmployeeBenefitsEmployeeBenefitsItemContribution']:
                return CompanyBenefitWithEmployeeBenefitsEmployeeBenefitsItemContribution
            __annotations__ = {
                "employee_uuid": employee_uuid,
                "company_benefit_uuid": company_benefit_uuid,
                "active": active,
                "deduct_as_percentage": deduct_as_percentage,
                "employee_deduction": employee_deduction,
                "company_contribution": company_contribution,
                "uuid": uuid,
                "contribution": contribution,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_uuid"]) -> MetaOapg.properties.employee_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_benefit_uuid"]) -> MetaOapg.properties.company_benefit_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deduct_as_percentage"]) -> MetaOapg.properties.deduct_as_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_deduction"]) -> MetaOapg.properties.employee_deduction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_contribution"]) -> MetaOapg.properties.company_contribution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contribution"]) -> 'CompanyBenefitWithEmployeeBenefitsEmployeeBenefitsItemContribution': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employee_uuid", "company_benefit_uuid", "active", "deduct_as_percentage", "employee_deduction", "company_contribution", "uuid", "contribution", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_uuid"]) -> typing.Union[MetaOapg.properties.employee_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_benefit_uuid"]) -> typing.Union[MetaOapg.properties.company_benefit_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deduct_as_percentage"]) -> typing.Union[MetaOapg.properties.deduct_as_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_deduction"]) -> typing.Union[MetaOapg.properties.employee_deduction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_contribution"]) -> typing.Union[MetaOapg.properties.company_contribution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contribution"]) -> typing.Union['CompanyBenefitWithEmployeeBenefitsEmployeeBenefitsItemContribution', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employee_uuid", "company_benefit_uuid", "active", "deduct_as_percentage", "employee_deduction", "company_contribution", "uuid", "contribution", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employee_uuid: typing.Union[MetaOapg.properties.employee_uuid, str, schemas.Unset] = schemas.unset,
        company_benefit_uuid: typing.Union[MetaOapg.properties.company_benefit_uuid, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        deduct_as_percentage: typing.Union[MetaOapg.properties.deduct_as_percentage, bool, schemas.Unset] = schemas.unset,
        employee_deduction: typing.Union[MetaOapg.properties.employee_deduction, str, schemas.Unset] = schemas.unset,
        company_contribution: typing.Union[MetaOapg.properties.company_contribution, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        contribution: typing.Union['CompanyBenefitWithEmployeeBenefitsEmployeeBenefitsItemContribution', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompanyBenefitWithEmployeeBenefitsEmployeeBenefitsItem':
        return super().__new__(
            cls,
            *args,
            employee_uuid=employee_uuid,
            company_benefit_uuid=company_benefit_uuid,
            active=active,
            deduct_as_percentage=deduct_as_percentage,
            employee_deduction=employee_deduction,
            company_contribution=company_contribution,
            uuid=uuid,
            contribution=contribution,
            _configuration=_configuration,
            **kwargs,
        )

from gusto_embedded_payroll_python_sdk.model.company_benefit_with_employee_benefits_employee_benefits_item_contribution import CompanyBenefitWithEmployeeBenefitsEmployeeBenefitsItemContribution
