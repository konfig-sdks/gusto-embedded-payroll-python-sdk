# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class GarnishmentsUpdateGarnishmentRequest(BaseModel):
    # The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
    version: str = Field(alias='version')

    # The description of the garnishment.
    description: typing.Optional[str] = Field(None, alias='description')

    # Whether or not this garnishment is currently active.
    active: typing.Optional[bool] = Field(None, alias='active')

    # The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. \"8.00\".
    amount: typing.Optional[float] = Field(None, alias='amount')

    # Whether the garnishment is court ordered.
    court_ordered: typing.Optional[bool] = Field(None, alias='court_ordered')

    # The number of times to apply the garnishment. Ignored if recurring is true.
    times: typing.Optional[typing.Optional[int]] = Field(None, alias='times')

    # Whether the garnishment should recur indefinitely.
    recurring: typing.Optional[bool] = Field(None, alias='recurring')

    # The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. \"200.00\".
    annual_maximum: typing.Optional[typing.Optional[float]] = Field(None, alias='annual_maximum')

    # The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. \"16.00\".
    pay_period_maximum: typing.Optional[typing.Optional[float]] = Field(None, alias='pay_period_maximum')

    # Whether the amount should be treated as a percentage to be deducted per pay period.
    deduct_as_percentage: typing.Optional[bool] = Field(None, alias='deduct_as_percentage')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
