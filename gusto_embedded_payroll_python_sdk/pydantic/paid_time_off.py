# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class PaidTimeOff(BaseModel):
    # The name of the paid time off type.
    name: typing.Optional[Literal["Vacation Hours", "Sick Hours", "Holiday Hours"]] = Field(None, alias='name')

    # The name of the time off policy.
    policy_name: typing.Optional[str] = Field(None, alias='policy_name')

    # The UUID of the time off policy.
    policy_uuid: typing.Optional[str] = Field(None, alias='policy_uuid')

    # The unit the PTO type is accrued in.
    accrual_unit: typing.Optional[str] = Field(None, alias='accrual_unit')

    # The number of accrual units accrued per accrual period.
    accrual_rate: typing.Optional[str] = Field(None, alias='accrual_rate')

    # The accrual method of the time off policy
    accrual_method: typing.Optional[str] = Field(None, alias='accrual_method')

    # The frequency at which the PTO type is accrued.
    accrual_period: typing.Optional[str] = Field(None, alias='accrual_period')

    # The number of accrual units accrued.
    accrual_balance: typing.Optional[str] = Field(None, alias='accrual_balance')

    # The maximum number of accrual units allowed. A null value signifies no maximum.
    maximum_accrual_balance: typing.Optional[typing.Optional[str]] = Field(None, alias='maximum_accrual_balance')

    # Whether the accrual balance is paid to the employee upon termination.
    paid_at_termination: typing.Optional[bool] = Field(None, alias='paid_at_termination')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
