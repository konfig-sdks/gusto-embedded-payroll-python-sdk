# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from gusto_embedded_payroll_python_sdk.pydantic.flsa_status_type import FlsaStatusType
from gusto_embedded_payroll_python_sdk.pydantic.jobs_and_compensations_update_compensation_request_minimum_wages import JobsAndCompensationsUpdateCompensationRequestMinimumWages

class JobsAndCompensationsUpdateCompensationRequest(BaseModel):
    # The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
    version: str = Field(alias='version')

    # The dollar amount paid per payment unit.
    rate: typing.Optional[str] = Field(None, alias='rate')

    # The unit accompanying the compensation rate. If the employee is an owner, rate should be 'Paycheck'.
    payment_unit: typing.Optional[Literal["Hour", "Week", "Month", "Year", "Paycheck"]] = Field(None, alias='payment_unit')

    flsa_status: typing.Optional[FlsaStatusType] = Field(None, alias='flsa_status')

    # Determines whether the compensation should be adjusted for minimum wage. Only applies to Nonexempt employees.
    adjust_for_minimum_wage: typing.Optional[bool] = Field(None, alias='adjust_for_minimum_wage')

    minimum_wages: typing.Optional[JobsAndCompensationsUpdateCompensationRequestMinimumWages] = Field(None, alias='minimum_wages')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
