# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class Location(BaseModel):
    # The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
    version: typing.Optional[str] = Field(None, alias='version')

    # The UUID of the location object.
    uuid: typing.Optional[str] = Field(None, alias='uuid')

    # The UUID for the company to which the location belongs. Only included if the location belongs to a company.
    company_uuid: typing.Optional[str] = Field(None, alias='company_uuid')

    # The phone number for the location. Required for company locations. Optional for employee locations.
    phone_number: typing.Optional[str] = Field(None, alias='phone_number')

    street_1: typing.Optional[str] = Field(None, alias='street_1')

    street_2: typing.Optional[typing.Optional[str]] = Field(None, alias='street_2')

    city: typing.Optional[str] = Field(None, alias='city')

    state: typing.Optional[str] = Field(None, alias='state')

    zip: typing.Optional[str] = Field(None, alias='zip')

    country: typing.Optional[str] = Field(None, alias='country')

    # The status of the location. Inactive locations have been deleted, but may still have historical data associated with them.
    active: typing.Optional[bool] = Field(None, alias='active')

    # Specifies if the location is the company's mailing address. Only included if the location belongs to a company.
    mailing_address: typing.Optional[typing.Optional[bool]] = Field(None, alias='mailing_address')

    # Specifies if the location is the company's filing address. Only included if the location belongs to a company.
    filing_address: typing.Optional[typing.Optional[bool]] = Field(None, alias='filing_address')

    # Datetime for when location is created
    created_at: typing.Optional[str] = Field(None, alias='created_at')

    # Datetime for when location is updated
    updated_at: typing.Optional[str] = Field(None, alias='updated_at')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
