# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class ContractorPaymentReceiptContractorPaymentsItem(BaseModel):
    # The UUID of the contractor.
    contractor_uuid: typing.Optional[str] = Field(None, alias='contractor_uuid')

    # The first name of the contractor. Applies when `contractor_type` is `Individual`.
    contractor_first_name: typing.Optional[str] = Field(None, alias='contractor_first_name')

    # The last name of the contractor.  Applies when `contractor_type` is `Individual`.
    contractor_last_name: typing.Optional[str] = Field(None, alias='contractor_last_name')

    # The business name of the employee. Applies when `contractor_type` is `Business`.
    contractor_business_name: typing.Optional[str] = Field(None, alias='contractor_business_name')

    # The type of contractor.  `Individual` `Business`
    contractor_type: typing.Optional[str] = Field(None, alias='contractor_type')

    # The payment method.  `Direct Deposit` `Check` `Historical Payment` `Correction Payment`
    payment_method: typing.Optional[str] = Field(None, alias='payment_method')

    # The fixed wage of the payment, regardless of hours worked.
    wage: typing.Optional[str] = Field(None, alias='wage')

    # The bonus amount in the payment.
    bonus: typing.Optional[str] = Field(None, alias='bonus')

    # The reimbursement amount in the payment.
    reimbursement: typing.Optional[str] = Field(None, alias='reimbursement')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
