# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from gusto_embedded_payroll_python_sdk.pydantic.recovery_case_contractor_payment_uuids import RecoveryCaseContractorPaymentUuids

class RecoveryCase(BaseModel):
    # Unique identifier of an recovery case
    uuid: typing.Optional[str] = Field(None, alias='uuid')

    # Unique identifier of the company to which the recovery case belongs
    company_uuid: typing.Optional[str] = Field(None, alias='company_uuid')

    # Status of the recovery case
    status: typing.Optional[Literal["open", "redebit_initiated", "recovered", "lost"]] = Field(None, alias='status')

    # The latest bank error code for the recovery case. See [this article](https://engineering.gusto.com/how-ach-works-a-developer-perspective-part-2/) for a complete list of ACH return codes.
    latest_error_code: typing.Optional[str] = Field(None, alias='latest_error_code')

    # Date when funds were originally debited from the company's bank account
    original_debit_date: typing.Optional[str] = Field(None, alias='original_debit_date')

    # Check date for the associated payroll or contractor payments
    check_date: typing.Optional[str] = Field(None, alias='check_date')

    # The uuid of the associated payroll for which the recovery case was created. If the recovery case was created for a contractor payment, this field will be null.
    payroll_uuid: typing.Optional[str] = Field(None, alias='payroll_uuid')

    contractor_payment_uuids: typing.Optional[RecoveryCaseContractorPaymentUuids] = Field(None, alias='contractor_payment_uuids')

    # Amount outstanding for the recovery case
    amount_outstanding: typing.Optional[str] = Field(None, alias='amount_outstanding')

    # Total amount to be debited from the payroll or contractor payments
    event_total_amount: typing.Optional[str] = Field(None, alias='event_total_amount')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
