# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class ContractorPayment(BaseModel):
    # The unique identifier of the contractor payment in Gusto.
    uuid: typing.Optional[str] = Field(None, alias='uuid')

    # The UUID of the contractor.
    contractor_uuid: typing.Optional[str] = Field(None, alias='contractor_uuid')

    # The bonus amount in the payment.
    bonus: typing.Optional[str] = Field(None, alias='bonus')

    # The payment date.
    date: typing.Optional[str] = Field(None, alias='date')

    # The number of hours worked for the payment.
    hours: typing.Optional[str] = Field(None, alias='hours')

    # The payment method.
    payment_method: typing.Optional[Literal["Direct Deposit", "Check", "Historical Payment", "Correction Payment"]] = Field(None, alias='payment_method')

    # The reimbursement amount in the payment.
    reimbursement: typing.Optional[str] = Field(None, alias='reimbursement')

    # Contractor payment status
    status: typing.Optional[Literal["Funded", "Unfunded"]] = Field(None, alias='status')

    # The rate per hour worked for the payment.
    hourly_rate: typing.Optional[str] = Field(None, alias='hourly_rate')

    # Determine if the contractor payment can be cancelled.
    may_cancel: typing.Optional[bool] = Field(None, alias='may_cancel')

    # The fixed wage of the payment, regardless of hours worked.
    wage: typing.Optional[str] = Field(None, alias='wage')

    # The wage type for the payment.
    wage_type: typing.Optional[Literal["Hourly", "Fixed"]] = Field(None, alias='wage_type')

    # (hours * hourly_rate) + wage + bonus
    wage_total: typing.Optional[str] = Field(None, alias='wage_total')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
