# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from gusto_embedded_payroll_python_sdk.pydantic.time_off_request_approver import TimeOffRequestApprover
from gusto_embedded_payroll_python_sdk.pydantic.time_off_request_employee import TimeOffRequestEmployee
from gusto_embedded_payroll_python_sdk.pydantic.time_off_request_initiator import TimeOffRequestInitiator

class TimeOffRequest(BaseModel):
    # The ID of the time off request.
    id: typing.Optional[int] = Field(None, alias='id')

    # The status of the time off request.
    status: typing.Optional[Literal["pending", "approved", "denied"]] = Field(None, alias='status')

    # A note about the time off request, from the employee to the employer.
    employee_note: typing.Optional[str] = Field(None, alias='employee_note')

    # A note about the time off request, from the employer to the employee.
    employer_note: typing.Optional[str] = Field(None, alias='employer_note')

    # The type of time off request.
    request_type: typing.Optional[Literal["vacation", "sick"]] = Field(None, alias='request_type')

    # An object that represents the days in the time off request. The keys of the object are the dates, formatted as a YYYY-MM-DD string. The values of the object are the number of hours requested off for each day, formatted as a string representation of a numeric decimal to the thousands place.
    days: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='days')

    employee: typing.Optional[TimeOffRequestEmployee] = Field(None, alias='employee')

    initiator: typing.Optional[TimeOffRequestInitiator] = Field(None, alias='initiator')

    approver: typing.Optional[TimeOffRequestApprover] = Field(None, alias='approver')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
