# coding: utf-8

"""
    Gusto API

    Welcome to Gusto's Embedded Payroll API documentation!

    The version of the OpenAPI document: 2024-03-01
    Contact: developer@gusto.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from gusto_embedded_payroll_python_sdk.pydantic.company_address import CompanyAddress
from gusto_embedded_payroll_python_sdk.pydantic.company_compensations import CompanyCompensations
from gusto_embedded_payroll_python_sdk.pydantic.company_primary_payroll_admin import CompanyPrimaryPayrollAdmin
from gusto_embedded_payroll_python_sdk.pydantic.company_primary_signatory import CompanyPrimarySignatory

class Company(BaseModel):
    # The Federal Employer Identification Number of the company.
    ein: typing.Optional[str] = Field(None, alias='ein')

    # The tax payer type of the company.
    entity_type: typing.Optional[Literal["C-Corporation", "S-Corporation", "Sole proprietor", "LLC", "LLP", "Limited partnership", "Co-ownership", "Association", "Trusteeship", "General partnership", "Joint venture", "Non-Profit"]] = Field(None, alias='entity_type')

    # The Gusto product tier of the company (not applicable to Embedded partner managed companies).
    tier: typing.Optional[Literal["simple", "plus", "premium", "core", "complete", "concierge", "contractor_only", "basic"]] = Field(None, alias='tier')

    # Whether or not the company is suspended in Gusto. Suspended companies may not run payroll.
    is_suspended: typing.Optional[bool] = Field(None, alias='is_suspended')

    # The status of the company in Gusto. \"Approved\" companies may run payroll with Gusto. \"Not Approved\" companies may not yet run payroll with Gusto. In order to run payroll, the company may need to complete onboarding or contact support. \"Suspended\" companies may not run payroll with Gusto. In order to unsuspend their account, the company must contact support.
    company_status: typing.Optional[Literal["Approved", "Not Approved", "Suspended"]] = Field(None, alias='company_status')

    # A unique identifier of the company in Gusto.
    uuid: typing.Optional[str] = Field(None, alias='uuid')

    # The name of the company.
    name: typing.Optional[str] = Field(None, alias='name')

    # The trade name of the company.
    trade_name: typing.Optional[str] = Field(None, alias='trade_name')

    # Whether the company is fully managed by a partner via the API
    is_partner_managed: typing.Optional[bool] = Field(None, alias='is_partner_managed')

    # The pay schedule assignment type.
    pay_schedule_type: typing.Optional[Literal["single", "hourly_salaried", "by_employee", "by_department"]] = Field(None, alias='pay_schedule_type')

    # Company's first invoiceable event date
    join_date: typing.Optional[str] = Field(None, alias='join_date')

    # Company's default funding type
    funding_type: typing.Optional[Literal["ach", "reverse_wire", "wire_in", "brex"]] = Field(None, alias='funding_type')

    # The locations of the company.
    locations: typing.Optional[typing.List[CompanyAddress]] = Field(None, alias='locations')

    compensations: typing.Optional[CompanyCompensations] = Field(None, alias='compensations')

    primary_signatory: typing.Optional[CompanyPrimarySignatory] = Field(None, alias='primary_signatory')

    primary_payroll_admin: typing.Optional[CompanyPrimaryPayrollAdmin] = Field(None, alias='primary_payroll_admin')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
